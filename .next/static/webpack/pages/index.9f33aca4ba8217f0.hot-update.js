"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./src/services/multimediaProcessor.js":
/*!*********************************************!*\
  !*** ./src/services/multimediaProcessor.js ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processAudio: () => (/* binding */ processAudio),\n/* harmony export */   processImage: () => (/* binding */ processImage),\n/* harmony export */   processText: () => (/* binding */ processText),\n/* harmony export */   processVideo: () => (/* binding */ processVideo)\n/* harmony export */ });\n/* harmony import */ var C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator.js */ \"(pages-dir-browser)/./node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator/index.js */ \"(pages-dir-browser)/./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(pages-dir-browser)/./node_modules/axios/index.js\");\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./database */ \"(pages-dir-browser)/./src/services/database.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\n// This file will handle multimedia processing and AI integrations using web-compatible APIs\n\n\n\n// Function to read file data as base64\nvar readFileAsBase64 = function readFileAsBase64(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onload = function () {\n      return resolve(reader.result);\n    };\n    reader.onerror = function (error) {\n      return reject(error);\n    };\n    reader.readAsDataURL(file);\n  });\n};\n\n// Process image file with AI\nvar processImage = /*#__PURE__*/function () {\n  var _ref = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(file) {\n    var base64Data, response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          if (file) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", null);\n        case 3:\n          if (file.type.startsWith('image/')) {\n            _context.next = 5;\n            break;\n          }\n          throw new Error(\"File type \".concat(file.type, \" is not supported for image processing\"));\n        case 5:\n          _context.next = 7;\n          return readFileAsBase64(file);\n        case 7:\n          base64Data = _context.sent;\n          _context.next = 10;\n          return ensureValidImageData(base64Data, file.name);\n        case 10:\n          _context.next = 12;\n          return fetchAIProcessing('image', base64Data, file.name);\n        case 12:\n          response = _context.sent;\n          // Store the processed result\n          processedData = {\n            originalName: file.name,\n            type: 'image',\n            size: file.size,\n            mimeType: file.type,\n            processingResult: response,\n            timestamp: new Date().toISOString(),\n            data: base64Data\n          };\n          _context.next = 16;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('image', JSON.stringify(processedData));\n        case 16:\n          return _context.abrupt(\"return\", processedData);\n        case 19:\n          _context.prev = 19;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('Error processing image:', _context.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            originalName: file ? file.name : 'unknown',\n            type: 'image',\n            size: file ? file.size : 0,\n            mimeType: file ? file.type : 'unknown',\n            processingResult: \"Error: Unable to process image. \".concat(_context.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context.next = 25;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('image', JSON.stringify(errorData));\n        case 25:\n          return _context.abrupt(\"return\", errorData);\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 19]]);\n  }));\n  return function processImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// Helper function to validate image data before sending to API\nvar ensureValidImageData = /*#__PURE__*/function () {\n  var _ref2 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2(base64Data, filename) {\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n            // Create an image element to test loading\n            var img = new Image();\n            img.onload = function () {\n              // If image loads successfully it's valid\n              console.log(\"Image validated: \".concat(filename, \" (\").concat(img.width, \"x\").concat(img.height, \")\"));\n              resolve(true);\n            };\n            img.onerror = function () {\n              reject(new Error('Invalid image data or format'));\n            };\n\n            // Set source to test loading\n            img.src = base64Data;\n          }));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function ensureValidImageData(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n// Process video file with AI\nvar processVideo = /*#__PURE__*/function () {\n  var _ref3 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee3(file) {\n    var base64Data, response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          if (file) {\n            _context3.next = 3;\n            break;\n          }\n          return _context3.abrupt(\"return\", null);\n        case 3:\n          if (file.type.startsWith('video/')) {\n            _context3.next = 5;\n            break;\n          }\n          throw new Error(\"File type \".concat(file.type, \" is not supported for video processing\"));\n        case 5:\n          _context3.next = 7;\n          return readFileAsBase64(file);\n        case 7:\n          base64Data = _context3.sent;\n          _context3.next = 10;\n          return fetchAIProcessing('video', base64Data, file.name);\n        case 10:\n          response = _context3.sent;\n          // Store the processed result\n          processedData = {\n            originalName: file.name,\n            type: 'video',\n            size: file.size,\n            mimeType: file.type,\n            processingResult: response,\n            timestamp: new Date().toISOString(),\n            data: base64Data\n          };\n          _context3.next = 14;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('video', JSON.stringify(processedData));\n        case 14:\n          return _context3.abrupt(\"return\", processedData);\n        case 17:\n          _context3.prev = 17;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error('Error processing video:', _context3.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            originalName: file ? file.name : 'unknown',\n            type: 'video',\n            size: file ? file.size : 0,\n            mimeType: file ? file.type : 'unknown',\n            processingResult: \"Error: Unable to process video. \".concat(_context3.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context3.next = 23;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('video', JSON.stringify(errorData));\n        case 23:\n          return _context3.abrupt(\"return\", errorData);\n        case 24:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 17]]);\n  }));\n  return function processVideo(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n// Process audio with AI\nvar processAudio = /*#__PURE__*/function () {\n  var _ref4 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee4(file) {\n    var base64Data, response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          if (file) {\n            _context4.next = 3;\n            break;\n          }\n          return _context4.abrupt(\"return\", null);\n        case 3:\n          if (file.type.startsWith('audio/')) {\n            _context4.next = 5;\n            break;\n          }\n          throw new Error(\"File type \".concat(file.type, \" is not supported for audio processing\"));\n        case 5:\n          _context4.next = 7;\n          return readFileAsBase64(file);\n        case 7:\n          base64Data = _context4.sent;\n          _context4.next = 10;\n          return fetchAIProcessing('audio', base64Data, file.name);\n        case 10:\n          response = _context4.sent;\n          // Store the processed result\n          processedData = {\n            originalName: file.name,\n            type: 'audio',\n            size: file.size,\n            mimeType: file.type,\n            processingResult: response,\n            timestamp: new Date().toISOString(),\n            data: base64Data\n          };\n          _context4.next = 14;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('audio', JSON.stringify(processedData));\n        case 14:\n          return _context4.abrupt(\"return\", processedData);\n        case 17:\n          _context4.prev = 17;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error('Error processing audio:', _context4.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            originalName: file ? file.name : 'unknown',\n            type: 'audio',\n            size: file ? file.size : 0,\n            mimeType: file ? file.type : 'unknown',\n            processingResult: \"Error: Unable to process audio. \".concat(_context4.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context4.next = 23;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('audio', JSON.stringify(errorData));\n        case 23:\n          return _context4.abrupt(\"return\", errorData);\n        case 24:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[0, 17]]);\n  }));\n  return function processAudio(_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n// Process text with AI\nvar processText = /*#__PURE__*/function () {\n  var _ref5 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee5(text) {\n    var response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          if (!(!text || typeof text !== 'string' || text.trim().length === 0)) {\n            _context5.next = 3;\n            break;\n          }\n          throw new Error('Invalid or empty text input');\n        case 3:\n          _context5.next = 5;\n          return fetchAIProcessing('text', text);\n        case 5:\n          response = _context5.sent;\n          // Store the processed result\n          processedData = {\n            type: 'text',\n            content: text,\n            processingResult: response,\n            timestamp: new Date().toISOString()\n          };\n          _context5.next = 9;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('text', JSON.stringify(processedData));\n        case 9:\n          return _context5.abrupt(\"return\", processedData);\n        case 12:\n          _context5.prev = 12;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error('Error processing text:', _context5.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            type: 'text',\n            content: text || '',\n            processingResult: \"Error: Unable to process text. \".concat(_context5.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context5.next = 18;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('text', JSON.stringify(errorData));\n        case 18:\n          return _context5.abrupt(\"return\", errorData);\n        case 19:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[0, 12]]);\n  }));\n  return function processText(_x6) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\n// Function to call relevant API for processing based on media type\nvar fetchAIProcessing = /*#__PURE__*/function () {\n  var _ref6 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee6(mediaType, content) {\n    var filename,\n      openAIApiKey,\n      openRouterApiKey,\n      _args6 = arguments;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          filename = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : '';\n          // Get API keys from environment variables\n          openAIApiKey = \"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\";\n          openRouterApiKey = process.env.OPENROUTER_API_KEY; // Ensure we have an API key\n          if (!(!openAIApiKey && !openRouterApiKey)) {\n            _context6.next = 6;\n            break;\n          }\n          console.error('API key not found in environment variables');\n          throw new Error('API key is required for media processing');\n        case 6:\n          _context6.prev = 6;\n          _context6.t0 = mediaType;\n          _context6.next = _context6.t0 === 'image' ? 10 : _context6.t0 === 'audio' ? 13 : _context6.t0 === 'video' ? 16 : _context6.t0 === 'text' ? 19 : 22;\n          break;\n        case 10:\n          _context6.next = 12;\n          return processImageWithGPT4Vision(openAIApiKey, content, filename);\n        case 12:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 13:\n          _context6.next = 15;\n          return processAudioWithWhisper(openAIApiKey, content, filename);\n        case 15:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 16:\n          _context6.next = 18;\n          return processVideoWithFrameExtraction(openAIApiKey, content, filename);\n        case 18:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 19:\n          _context6.next = 21;\n          return processTextWithGPT(openRouterApiKey || openAIApiKey, content);\n        case 21:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 22:\n          throw new Error(\"Unsupported media type: \".concat(mediaType));\n        case 23:\n          _context6.next = 29;\n          break;\n        case 25:\n          _context6.prev = 25;\n          _context6.t1 = _context6[\"catch\"](6);\n          console.error(\"Error in AI processing for \".concat(mediaType, \":\"), _context6.t1);\n          throw _context6.t1;\n        case 29:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[6, 25]]);\n  }));\n  return function fetchAIProcessing(_x7, _x8) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\n// Process image with OpenAI Vision models\nvar processImageWithGPT4Vision = /*#__PURE__*/function () {\n  var _ref7 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee7(apiKey, imageData, filename) {\n    var isOpenRouter, model, endpoint, headers, base64Image, imageUrl, imgDetails, requestBody, response, status, data, _data$error;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          console.log('Processing image with OpenAI Vision models...');\n\n          // Check if we're using OpenRouter or OpenAI based on the API key format\n          // OpenRouter keys start with sk-or-, OpenAI keys start with sk- (including sk-proj-)\n          isOpenRouter = apiKey.startsWith('sk-or-');\n          headers = {\n            'Content-Type': 'application/json',\n            'Authorization': \"Bearer \".concat(apiKey)\n          }; // Log API key format for debugging (without revealing the full key)\n          console.log(\"API key format: \".concat(apiKey.substring(0, 7), \"...\"));\n\n          // Select appropriate model and endpoint based on API key type\n          if (isOpenRouter) {\n            model = 'openai/gpt-4-vision-preview'; // OpenRouter format for Vision model\n            endpoint = 'https://openrouter.ai/api/v1/chat/completions';\n            headers['HTTP-Referer'] = 'https://precek.app'; // Required by OpenRouter\n            console.log('Using OpenRouter for image processing');\n          } else {\n            // Using OpenAI directly\n            model = 'gpt-4-vision-preview'; // Latest vision model\n            endpoint = 'https://api.openai.com/v1/chat/completions';\n            console.log('Using OpenAI directly for image processing');\n          } // Process the image data - make sure we have a proper format\n          base64Image = imageData;\n          _context7.next = 9;\n          return getImageDetails(imageData);\n        case 9:\n          imgDetails = _context7.sent;\n          console.log(\"Image validated: \".concat(filename, \" (\").concat(imgDetails.width, \"x\").concat(imgDetails.height, \", \").concat(imgDetails.format, \")\"));\n\n          // Check if the image data is already a URL or needs to be converted to base64\n          if (base64Image.startsWith('http')) {\n            // If it's already a URL, use it directly\n            imageUrl = base64Image;\n          } else {\n            // If it's base64 data, extract the base64 part if needed\n            if (base64Image.includes(',')) {\n              // Extract the base64 part after the comma if it's a data URL\n              base64Image = base64Image.split(',')[1];\n            }\n            // Format as a data URL\n            imageUrl = \"data:\".concat(imgDetails.mimeType, \";base64,\").concat(base64Image);\n          }\n\n          // Create the API request body according to OpenAI documentation\n          requestBody = {\n            model: model,\n            messages: [{\n              role: 'system',\n              content: 'You are an image analysis assistant. Analyze images thoroughly and accurately.'\n            }, {\n              role: 'user',\n              content: [{\n                type: 'text',\n                text: \"Please analyze this image thoroughly and provide:\\n1. Description of main subjects and elements\\n2. Colors, lighting, and composition analysis\\n3. Any text visible in the image (transcribe exactly)\\n4. Context and potential meaning/purpose of the image\\n5. Any notable objects, landmarks, or people\\n6. Image quality and technical assessment\\n\\nFilename: \".concat(filename || 'uploaded image')\n              }, {\n                type: 'image_url',\n                image_url: {\n                  url: imageUrl\n                }\n              }]\n            }],\n            max_tokens: 1000,\n            temperature: 0.7\n          }; // Make the API request\n          console.log(\"Sending request to \".concat(isOpenRouter ? 'OpenRouter' : 'OpenAI', \" API...\"));\n          _context7.next = 16;\n          return (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            method: 'post',\n            url: endpoint,\n            headers: headers,\n            data: requestBody,\n            timeout: 60000 // 60 second timeout for image processing\n          });\n        case 16:\n          response = _context7.sent;\n          if (!(response.data && response.data.choices && response.data.choices.length > 0)) {\n            _context7.next = 22;\n            break;\n          }\n          console.log('Image successfully processed by vision model');\n          return _context7.abrupt(\"return\", formatImageAnalysis(response.data.choices[0].message.content, filename, imgDetails));\n        case 22:\n          console.error('Unexpected API response format:', response.data);\n          throw new Error('Failed to process image with AI model: invalid response format');\n        case 24:\n          _context7.next = 47;\n          break;\n        case 26:\n          _context7.prev = 26;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error('Image processing error:', _context7.t0);\n          // Check for specific API error types\n          if (!_context7.t0.response) {\n            _context7.next = 46;\n            break;\n          }\n          status = _context7.t0.response.status;\n          data = _context7.t0.response.data;\n          if (!(status === 400)) {\n            _context7.next = 36;\n            break;\n          }\n          throw new Error(\"Image processing failed: Bad request - \".concat(((_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) || 'Invalid request parameters'));\n        case 36:\n          if (!(status === 401)) {\n            _context7.next = 40;\n            break;\n          }\n          throw new Error('Image processing failed: Invalid API key or unauthorized access');\n        case 40:\n          if (!(status === 429)) {\n            _context7.next = 44;\n            break;\n          }\n          throw new Error('Image processing failed: Rate limit exceeded or insufficient quota');\n        case 44:\n          if (!(status === 500)) {\n            _context7.next = 46;\n            break;\n          }\n          throw new Error('Image processing failed: OpenAI service error');\n        case 46:\n          throw new Error(\"Image processing failed: \".concat(_context7.t0.message));\n        case 47:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[0, 26]]);\n  }));\n  return function processImageWithGPT4Vision(_x9, _x10, _x11) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\n// Helper function to get image details\nvar getImageDetails = /*#__PURE__*/function () {\n  var _ref8 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee8(imageData) {\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          return _context8.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var img = new Image();\n            img.onload = function () {\n              // Get image format from data URL\n              var format = 'jpeg'; // Default\n              var mimeType = 'image/jpeg'; // Default\n\n              if (imageData.includes('data:')) {\n                var mimeMatch = imageData.match(/data:([^;]+);/);\n                if (mimeMatch && mimeMatch[1]) {\n                  mimeType = mimeMatch[1];\n                  format = mimeMatch[1].split('/')[1];\n                }\n              }\n              resolve({\n                width: img.width,\n                height: img.height,\n                format: format,\n                mimeType: mimeType,\n                aspectRatio: img.width / img.height\n              });\n            };\n            img.onerror = function () {\n              reject(new Error('Failed to load image for analysis'));\n            };\n            img.src = imageData;\n          }));\n        case 1:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return function getImageDetails(_x12) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\n// Format the image analysis in a structured way\nvar formatImageAnalysis = function formatImageAnalysis(content, filename, imageDetails) {\n  return \"# Image Analysis: \".concat(filename || 'Uploaded Image', \"\\n\\n## Technical Details\\n- Dimensions: \").concat(imageDetails.width, \"x\").concat(imageDetails.height, \" pixels\\n- Format: \").concat(imageDetails.format.toUpperCase(), \"\\n- Aspect Ratio: \").concat(imageDetails.aspectRatio.toFixed(2), \"\\n\\n## Analysis\\n\").concat(content, \"\\n\\n---\\n*Analyzed with OpenAI Vision Model*\");\n};\n\n// Process audio with Whisper API according to OpenAI docs\n// https://platform.openai.com/docs/guides/speech-to-text/quickstart\nvar processAudioWithWhisper = /*#__PURE__*/function () {\n  var _ref9 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee9(apiKey, audioData, filename) {\n    var audioBase64, contentType, byteCharacters, byteArrays, offset, slice, byteNumbers, i, byteArray, audioBlob, formData, response, transcription, analysisResponse;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          console.log('Processing audio with Whisper API...');\n\n          // Convert base64 audio data to a Blob\n          audioBase64 = audioData;\n          if (audioBase64.includes(',')) {\n            audioBase64 = audioBase64.split(',')[1];\n          }\n\n          // Determine the content type from the data URL or filename\n          contentType = audioData.includes('data:') ? audioData.split(';')[0].split(':')[1] : filename.endsWith('.mp3') ? 'audio/mp3' : 'audio/mpeg'; // Convert base64 to a Blob (important for FormData)\n          byteCharacters = atob(audioBase64);\n          byteArrays = [];\n          for (offset = 0; offset < byteCharacters.length; offset += 1024) {\n            slice = byteCharacters.slice(offset, offset + 1024);\n            byteNumbers = new Array(slice.length);\n            for (i = 0; i < slice.length; i++) {\n              byteNumbers[i] = slice.charCodeAt(i);\n            }\n            byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n          }\n          audioBlob = new Blob(byteArrays, {\n            type: contentType\n          });\n          console.log(\"Created audio blob of type \".concat(contentType, \", size: \").concat(audioBlob.size, \" bytes\"));\n\n          // Create a form data object as required by the Whisper API\n          formData = new FormData();\n          formData.append('file', audioBlob, filename || 'audio.mp3');\n          formData.append('model', 'whisper-1');\n          formData.append('response_format', 'json'); // Get structured JSON response\n          formData.append('language', 'en'); // Set to English for better accuracy\n\n          // Call the OpenAI Whisper API\n          console.log('Sending request to Whisper API...');\n          _context9.next = 18;\n          return (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            method: 'post',\n            url: 'https://api.openai.com/v1/audio/transcriptions',\n            headers: {\n              'Authorization': \"Bearer \".concat(apiKey)\n              // Content-Type is set automatically by axios with FormData\n            },\n\n            data: formData\n          });\n        case 18:\n          response = _context9.sent;\n          if (!(response.data && response.data.text)) {\n            _context9.next = 33;\n            break;\n          }\n          transcription = response.data.text;\n          console.log('Successfully transcribed audio');\n\n          // Now analyze the transcription with GPT\n          console.log('Analyzing transcription content...');\n          _context9.next = 25;\n          return (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            method: 'post',\n            url: 'https://api.openai.com/v1/chat/completions',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"Bearer \".concat(apiKey)\n            },\n            data: {\n              model: 'gpt-3.5-turbo',\n              messages: [{\n                role: 'user',\n                content: \"Analyze this audio transcription and provide a summary of key points, topics, and any notable patterns or insights:\\n\\n\".concat(transcription)\n              }],\n              max_tokens: 500\n            }\n          });\n        case 25:\n          analysisResponse = _context9.sent;\n          if (!(analysisResponse.data && analysisResponse.data.choices && analysisResponse.data.choices.length > 0 && analysisResponse.data.choices[0].message)) {\n            _context9.next = 30;\n            break;\n          }\n          return _context9.abrupt(\"return\", \"## Audio Transcription\\n\\n\".concat(transcription, \"\\n\\n## Analysis\\n\\n\").concat(analysisResponse.data.choices[0].message.content));\n        case 30:\n          return _context9.abrupt(\"return\", \"## Audio Transcription\\n\\n\".concat(transcription, \"\\n\\n(Analysis unavailable)\"));\n        case 31:\n          _context9.next = 35;\n          break;\n        case 33:\n          console.error('Unexpected API response format:', response.data);\n          throw new Error('Failed to transcribe audio: unexpected response format');\n        case 35:\n          _context9.next = 42;\n          break;\n        case 37:\n          _context9.prev = 37;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error('Audio processing error:', _context9.t0);\n          if (_context9.t0.response) {\n            console.error('API error response:', _context9.t0.response.data);\n          }\n          throw new Error(\"Audio processing failed: \".concat(_context9.t0.message));\n        case 42:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9, null, [[0, 37]]);\n  }));\n  return function processAudioWithWhisper(_x13, _x14, _x15) {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\n// Process video by extracting multiple frames for analysis\nvar processVideoWithFrameExtraction = /*#__PURE__*/function () {\n  var _ref10 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee10(apiKey, videoData, filename) {\n    var videoBlob, videoUrl, video, frameCount, frames, canvas, ctx, i, timestamp, frameDataUrl, frameAnalyses, _i, frame, analysis, formattedAnalyses;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          console.log('Processing video with frame extraction...');\n\n          // Convert data URL to Blob for video element\n          _context10.next = 4;\n          return fetch(videoData).then(function (res) {\n            return res.blob();\n          });\n        case 4:\n          videoBlob = _context10.sent;\n          videoUrl = URL.createObjectURL(videoBlob); // Create a video element to extract frames\n          video = document.createElement('video');\n          video.muted = true; // Required for autoplay in some browsers\n          video.playsInline = true;\n          video.crossOrigin = 'anonymous';\n          video.src = videoUrl;\n\n          // Wait for metadata to load\n          _context10.next = 13;\n          return new Promise(function (resolve, reject) {\n            video.onloadedmetadata = resolve;\n            video.onerror = reject;\n            video.load();\n          });\n        case 13:\n          console.log(\"Video loaded: Duration \".concat(video.duration, \"s, Dimensions: \").concat(video.videoWidth, \"x\").concat(video.videoHeight));\n\n          // Extract multiple frames from different points in the video\n          frameCount = Math.min(3, Math.max(1, Math.floor(video.duration / 5)));\n          frames = []; // Create canvas for frame extraction\n          canvas = document.createElement('canvas');\n          canvas.width = video.videoWidth;\n          canvas.height = video.videoHeight;\n          ctx = canvas.getContext('2d'); // Extract frames at different timestamps\n          i = 0;\n        case 21:\n          if (!(i < frameCount)) {\n            _context10.next = 33;\n            break;\n          }\n          timestamp = i * (video.duration / (frameCount + 1)); // Seek to timestamp\n          video.currentTime = timestamp;\n\n          // Wait for seek to complete\n          _context10.next = 26;\n          return new Promise(function (resolve) {\n            video.onseeked = resolve;\n          });\n        case 26:\n          // Draw frame to canvas\n          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n          // Get frame as data URL\n          frameDataUrl = canvas.toDataURL('image/jpeg', 0.8);\n          frames.push({\n            timestamp: timestamp,\n            dataUrl: frameDataUrl\n          });\n          console.log(\"Extracted frame at \".concat(timestamp.toFixed(2), \"s\"));\n        case 30:\n          i++;\n          _context10.next = 21;\n          break;\n        case 33:\n          // Clean up video resources\n          URL.revokeObjectURL(videoUrl);\n\n          // Analyze frames with Vision API\n          console.log('Analyzing video frames with Vision API...');\n          frameAnalyses = [];\n          _i = 0;\n        case 37:\n          if (!(_i < frames.length)) {\n            _context10.next = 46;\n            break;\n          }\n          frame = frames[_i];\n          _context10.next = 41;\n          return processImageWithGPT4Vision(apiKey, frame.dataUrl, \"Frame at \".concat(frame.timestamp.toFixed(2), \"s from \").concat(filename));\n        case 41:\n          analysis = _context10.sent;\n          frameAnalyses.push({\n            timestamp: frame.timestamp,\n            analysis: analysis\n          });\n        case 43:\n          _i++;\n          _context10.next = 37;\n          break;\n        case 46:\n          // Combine all frame analyses into a comprehensive video analysis\n          formattedAnalyses = frameAnalyses.map(function (fa) {\n            return \"### Frame at \".concat(fa.timestamp.toFixed(2), \"s:\\n\").concat(fa.analysis);\n          }).join('\\n\\n');\n          return _context10.abrupt(\"return\", \"# Video Analysis for: \".concat(filename, \"\\n\\n## Technical Details\\n- Duration: \").concat(Math.round(video.duration), \" seconds\\n- Dimensions: \").concat(video.videoWidth, \"x\").concat(video.videoHeight, \"\\n- Format: \").concat(videoBlob.type, \"\\n- File Size: \").concat((videoBlob.size / (1024 * 1024)).toFixed(2), \" MB\\n\\n## Content Analysis\\n\").concat(formattedAnalyses, \"\\n\\nThis analysis is based on \").concat(frameCount, \" key frames extracted from the video.\"));\n        case 50:\n          _context10.prev = 50;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error('Video processing error:', _context10.t0);\n          throw new Error(\"Video processing failed: \".concat(_context10.t0.message));\n        case 54:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10, null, [[0, 50]]);\n  }));\n  return function processVideoWithFrameExtraction(_x16, _x17, _x18) {\n    return _ref10.apply(this, arguments);\n  };\n}();\n\n// Process text with GPT model through OpenRouter\nvar processTextWithGPT = /*#__PURE__*/function () {\n  var _ref11 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee11(apiKey, text) {\n    var isOpenRouter, endpoint, model, requestBody, response;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          // Determine if we're using OpenRouter or OpenAI based on the API key format\n          isOpenRouter = apiKey.startsWith('sk-or-');\n          endpoint = isOpenRouter ? 'https://openrouter.ai/api/v1/chat/completions' : 'https://api.openai.com/v1/chat/completions'; // Use a more cost-effective model if going through OpenRouter\n          model = isOpenRouter ? 'openai/gpt-3.5-turbo' : 'gpt-3.5-turbo';\n          requestBody = {\n            model: model,\n            messages: [{\n              role: 'user',\n              content: text\n            }],\n            max_tokens: 1000\n          };\n          _context11.next = 7;\n          return axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].post(endpoint, requestBody, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"Bearer \".concat(apiKey)\n            }\n          });\n        case 7:\n          response = _context11.sent;\n          if (!(response.data && response.data.choices && response.data.choices.length > 0)) {\n            _context11.next = 12;\n            break;\n          }\n          return _context11.abrupt(\"return\", response.data.choices[0].message.content);\n        case 12:\n          console.error('Unexpected API response format:', response.data);\n          throw new Error('Failed to process text with AI model');\n        case 14:\n          _context11.next = 20;\n          break;\n        case 16:\n          _context11.prev = 16;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error('Text processing error:', _context11.t0);\n          throw new Error(\"Text processing failed: \".concat(_context11.t0.message));\n        case 20:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11, null, [[0, 16]]);\n  }));\n  return function processTextWithGPT(_x19, _x20) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9tdWx0aW1lZGlhUHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQzBCO0FBQ2M7O0FBRXhDO0FBQ0EsSUFBTUUsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFnQkEsQ0FBSUMsSUFBSSxFQUFLO0VBQ2pDLE9BQU8sSUFBSUMsT0FBTyxDQUFDLFVBQUNDLE9BQU8sRUFBRUMsTUFBTSxFQUFLO0lBQ3RDLElBQU1DLE1BQU0sR0FBRyxJQUFJQyxVQUFVLENBQUMsQ0FBQztJQUMvQkQsTUFBTSxDQUFDRSxNQUFNLEdBQUc7TUFBQSxPQUFNSixPQUFPLENBQUNFLE1BQU0sQ0FBQ0csTUFBTSxDQUFDO0lBQUE7SUFDNUNILE1BQU0sQ0FBQ0ksT0FBTyxHQUFHLFVBQUNDLEtBQUs7TUFBQSxPQUFLTixNQUFNLENBQUNNLEtBQUssQ0FBQztJQUFBO0lBQ3pDTCxNQUFNLENBQUNNLGFBQWEsQ0FBQ1YsSUFBSSxDQUFDO0VBQzVCLENBQUMsQ0FBQztBQUNKLENBQUM7O0FBRUQ7QUFDQSxJQUFNVyxZQUFZO0VBQUEsSUFBQUMsSUFBQSxHQUFBQyxxS0FBQSxlQUFBQyx1SUFBQSxDQUFHLFNBQUFFLFFBQU9oQixJQUFJO0lBQUEsSUFBQWlCLFVBQUEsRUFBQUMsUUFBQSxFQUFBQyxhQUFBLEVBQUFDLFNBQUE7SUFBQSxPQUFBTix1SUFBQSxVQUFBUSxTQUFBQyxRQUFBO01BQUEsa0JBQUFBLFFBQUEsQ0FBQUMsSUFBQSxHQUFBRCxRQUFBLENBQUFFLElBQUE7UUFBQTtVQUFBRixRQUFBLENBQUFDLElBQUE7VUFBQSxJQUV2QnhCLElBQUk7WUFBQXVCLFFBQUEsQ0FBQUUsSUFBQTtZQUFBO1VBQUE7VUFBQSxPQUFBRixRQUFBLENBQUFHLE1BQUEsV0FBUyxJQUFJO1FBQUE7VUFBQSxJQUdqQjFCLElBQUksQ0FBQzJCLElBQUksQ0FBQ0MsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUFBTCxR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RUFBQSxHQUFBZ00sVUFBQTtVQUd6RC9MLE9BQU8sQ0FBQ3JDLEtBQUssQ0FBQyx3QkFBd0IsRUFBQW9PLFVBQUEsQ0FBQWhNLEVBQU8sQ0FBQztVQUFDLE1BQ3pDLElBQUloQixLQUFLLDRCQUFBQyxNQUFBLENBQTRCK00sVUFBQSxDQUFBaE0sRUFBQSxDQUFNRSxPQUFPLENBQUUsQ0FBQztRQUFBO1FBQUE7VUFBQSxPQUFBOEwsVUFBQSxDQUFBN0wsSUFBQTtNQUFBO0lBQUEsR0FBQTJMLFNBQUE7RUFBQSxDQUU5RDtFQUFBLGdCQXRDS3BJLGtCQUFrQkEsQ0FBQXdJLElBQUEsRUFBQUMsSUFBQTtJQUFBLE9BQUFOLE1BQUEsQ0FBQXhMLEtBQUEsT0FBQUMsU0FBQTtFQUFBO0FBQUEsR0FzQ3ZCO0FBRWdFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFydHVyXFxEb2N1bWVudHNcXENsaW5lXFxwcmVjZWtcXHByZWNla1xcc3JjXFxzZXJ2aWNlc1xcbXVsdGltZWRpYVByb2Nlc3Nvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgd2lsbCBoYW5kbGUgbXVsdGltZWRpYSBwcm9jZXNzaW5nIGFuZCBBSSBpbnRlZ3JhdGlvbnMgdXNpbmcgd2ViLWNvbXBhdGlibGUgQVBJc1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgeyBpbnNlcnREYXRhIH0gZnJvbSAnLi9kYXRhYmFzZSc7XHJcblxyXG4vLyBGdW5jdGlvbiB0byByZWFkIGZpbGUgZGF0YSBhcyBiYXNlNjRcclxuY29uc3QgcmVhZEZpbGVBc0Jhc2U2NCA9IChmaWxlKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICByZWFkZXIub25sb2FkID0gKCkgPT4gcmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcclxuICAgIHJlYWRlci5vbmVycm9yID0gKGVycm9yKSA9PiByZWplY3QoZXJyb3IpO1xyXG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vLyBQcm9jZXNzIGltYWdlIGZpbGUgd2l0aCBBSVxyXG5jb25zdCBwcm9jZXNzSW1hZ2UgPSBhc3luYyAoZmlsZSkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAoIWZpbGUpIHJldHVybiBudWxsO1xyXG5cclxuICAgIC8vIFZhbGlkYXRlIGZpbGUgdHlwZVxyXG4gICAgaWYgKCFmaWxlLnR5cGUuc3RhcnRzV2l0aCgnaW1hZ2UvJykpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWxlIHR5cGUgJHtmaWxlLnR5cGV9IGlzIG5vdCBzdXBwb3J0ZWQgZm9yIGltYWdlIHByb2Nlc3NpbmdgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiYXNlNjREYXRhID0gYXdhaXQgcmVhZEZpbGVBc0Jhc2U2NChmaWxlKTtcclxuXHJcbiAgICAvLyBCYXNpYyBpbWFnZSBwcmVwcm9jZXNzaW5nXHJcbiAgICBhd2FpdCBlbnN1cmVWYWxpZEltYWdlRGF0YShiYXNlNjREYXRhLCBmaWxlLm5hbWUpO1xyXG5cclxuICAgIC8vIENhbGwgQVBJIGZvciBpbWFnZSBhbmFseXNpc1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaEFJUHJvY2Vzc2luZygnaW1hZ2UnLCBiYXNlNjREYXRhLCBmaWxlLm5hbWUpO1xyXG5cclxuICAgIC8vIFN0b3JlIHRoZSBwcm9jZXNzZWQgcmVzdWx0XHJcbiAgICBjb25zdCBwcm9jZXNzZWREYXRhID0ge1xyXG4gICAgICBvcmlnaW5hbE5hbWU6IGZpbGUubmFtZSxcclxuICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgc2l6ZTogZmlsZS5zaXplLFxyXG4gICAgICBtaW1lVHlwZTogZmlsZS50eXBlLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiByZXNwb25zZSxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGRhdGE6IGJhc2U2NERhdGFcclxuICAgIH07XHJcblxyXG4gICAgYXdhaXQgaW5zZXJ0RGF0YSgnaW1hZ2UnLCBKU09OLnN0cmluZ2lmeShwcm9jZXNzZWREYXRhKSk7XHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkRGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyBpbWFnZTonLCBlcnJvcik7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZmFsbGJhY2sgcHJvY2Vzc2VkIHJlc3VsdCB3aXRoIGVycm9yIGluZm9ybWF0aW9uXHJcbiAgICBjb25zdCBlcnJvckRhdGEgPSB7XHJcbiAgICAgIG9yaWdpbmFsTmFtZTogZmlsZSA/IGZpbGUubmFtZSA6ICd1bmtub3duJyxcclxuICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgc2l6ZTogZmlsZSA/IGZpbGUuc2l6ZSA6IDAsXHJcbiAgICAgIG1pbWVUeXBlOiBmaWxlID8gZmlsZS50eXBlIDogJ3Vua25vd24nLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiBgRXJyb3I6IFVuYWJsZSB0byBwcm9jZXNzIGltYWdlLiAke2Vycm9yLm1lc3NhZ2V9YCxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGVycm9yOiB0cnVlXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFN0aWxsIHN0b3JlIHRoZSBlcnJvciByZXN1bHQgc28gdXNlciBjYW4gc2VlIGl0IGluIHZpc3VhbGl6YXRpb25zXHJcbiAgICBhd2FpdCBpbnNlcnREYXRhKCdpbWFnZScsIEpTT04uc3RyaW5naWZ5KGVycm9yRGF0YSkpO1xyXG5cclxuICAgIC8vIFdlIHJldHVybiB0aGUgZXJyb3IgZGF0YSByYXRoZXIgdGhhbiB0aHJvd2luZyBzbyBVSSBjYW4gaGFuZGxlIGl0IGdyYWNlZnVsbHlcclxuICAgIHJldHVybiBlcnJvckRhdGE7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHZhbGlkYXRlIGltYWdlIGRhdGEgYmVmb3JlIHNlbmRpbmcgdG8gQVBJXHJcbmNvbnN0IGVuc3VyZVZhbGlkSW1hZ2VEYXRhID0gYXN5bmMgKGJhc2U2NERhdGEsIGZpbGVuYW1lKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIC8vIENyZWF0ZSBhbiBpbWFnZSBlbGVtZW50IHRvIHRlc3QgbG9hZGluZ1xyXG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgLy8gSWYgaW1hZ2UgbG9hZHMgc3VjY2Vzc2Z1bGx5IGl0J3MgdmFsaWRcclxuICAgICAgY29uc29sZS5sb2coYEltYWdlIHZhbGlkYXRlZDogJHtmaWxlbmFtZX0gKCR7aW1nLndpZHRofXgke2ltZy5oZWlnaHR9KWApO1xyXG4gICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpbWcub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgcmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBpbWFnZSBkYXRhIG9yIGZvcm1hdCcpKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gU2V0IHNvdXJjZSB0byB0ZXN0IGxvYWRpbmdcclxuICAgIGltZy5zcmMgPSBiYXNlNjREYXRhO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gUHJvY2VzcyB2aWRlbyBmaWxlIHdpdGggQUlcclxuY29uc3QgcHJvY2Vzc1ZpZGVvID0gYXN5bmMgKGZpbGUpID0+IHtcclxuICB0cnkge1xyXG4gICAgaWYgKCFmaWxlKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAvLyBWYWxpZGF0ZSBmaWxlIHR5cGVcclxuICAgIGlmICghZmlsZS50eXBlLnN0YXJ0c1dpdGgoJ3ZpZGVvLycpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmlsZSB0eXBlICR7ZmlsZS50eXBlfSBpcyBub3Qgc3VwcG9ydGVkIGZvciB2aWRlbyBwcm9jZXNzaW5nYCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmFzZTY0RGF0YSA9IGF3YWl0IHJlYWRGaWxlQXNCYXNlNjQoZmlsZSk7XHJcblxyXG4gICAgLy8gQ2FsbCBBSSBzZXJ2aWNlIGZvciB2aWRlbyBhbmFseXNpc1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaEFJUHJvY2Vzc2luZygndmlkZW8nLCBiYXNlNjREYXRhLCBmaWxlLm5hbWUpO1xyXG5cclxuICAgIC8vIFN0b3JlIHRoZSBwcm9jZXNzZWQgcmVzdWx0XHJcbiAgICBjb25zdCBwcm9jZXNzZWREYXRhID0ge1xyXG4gICAgICBvcmlnaW5hbE5hbWU6IGZpbGUubmFtZSxcclxuICAgICAgdHlwZTogJ3ZpZGVvJyxcclxuICAgICAgc2l6ZTogZmlsZS5zaXplLFxyXG4gICAgICBtaW1lVHlwZTogZmlsZS50eXBlLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiByZXNwb25zZSxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGRhdGE6IGJhc2U2NERhdGFcclxuICAgIH07XHJcblxyXG4gICAgYXdhaXQgaW5zZXJ0RGF0YSgndmlkZW8nLCBKU09OLnN0cmluZ2lmeShwcm9jZXNzZWREYXRhKSk7XHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkRGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyB2aWRlbzonLCBlcnJvcik7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZmFsbGJhY2sgcHJvY2Vzc2VkIHJlc3VsdCB3aXRoIGVycm9yIGluZm9ybWF0aW9uXHJcbiAgICBjb25zdCBlcnJvckRhdGEgPSB7XHJcbiAgICAgIG9yaWdpbmFsTmFtZTogZmlsZSA/IGZpbGUubmFtZSA6ICd1bmtub3duJyxcclxuICAgICAgdHlwZTogJ3ZpZGVvJyxcclxuICAgICAgc2l6ZTogZmlsZSA/IGZpbGUuc2l6ZSA6IDAsXHJcbiAgICAgIG1pbWVUeXBlOiBmaWxlID8gZmlsZS50eXBlIDogJ3Vua25vd24nLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiBgRXJyb3I6IFVuYWJsZSB0byBwcm9jZXNzIHZpZGVvLiAke2Vycm9yLm1lc3NhZ2V9YCxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGVycm9yOiB0cnVlXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFN0aWxsIHN0b3JlIHRoZSBlcnJvciByZXN1bHQgc28gdXNlciBjYW4gc2VlIGl0IGluIHZpc3VhbGl6YXRpb25zXHJcbiAgICBhd2FpdCBpbnNlcnREYXRhKCd2aWRlbycsIEpTT04uc3RyaW5naWZ5KGVycm9yRGF0YSkpO1xyXG5cclxuICAgIC8vIFJldHVybiB0aGUgZXJyb3IgZGF0YSByYXRoZXIgdGhhbiB0aHJvd2luZ1xyXG4gICAgcmV0dXJuIGVycm9yRGF0YTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBQcm9jZXNzIGF1ZGlvIHdpdGggQUlcclxuY29uc3QgcHJvY2Vzc0F1ZGlvID0gYXN5bmMgKGZpbGUpID0+IHtcclxuICB0cnkge1xyXG4gICAgaWYgKCFmaWxlKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAvLyBWYWxpZGF0ZSBmaWxlIHR5cGVcclxuICAgIGlmICghZmlsZS50eXBlLnN0YXJ0c1dpdGgoJ2F1ZGlvLycpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmlsZSB0eXBlICR7ZmlsZS50eXBlfSBpcyBub3Qgc3VwcG9ydGVkIGZvciBhdWRpbyBwcm9jZXNzaW5nYCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmFzZTY0RGF0YSA9IGF3YWl0IHJlYWRGaWxlQXNCYXNlNjQoZmlsZSk7XHJcblxyXG4gICAgLy8gQ2FsbCBBSSBzZXJ2aWNlIGZvciBhdWRpbyBhbmFseXNpc1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaEFJUHJvY2Vzc2luZygnYXVkaW8nLCBiYXNlNjREYXRhLCBmaWxlLm5hbWUpO1xyXG5cclxuICAgIC8vIFN0b3JlIHRoZSBwcm9jZXNzZWQgcmVzdWx0XHJcbiAgICBjb25zdCBwcm9jZXNzZWREYXRhID0ge1xyXG4gICAgICBvcmlnaW5hbE5hbWU6IGZpbGUubmFtZSxcclxuICAgICAgdHlwZTogJ2F1ZGlvJyxcclxuICAgICAgc2l6ZTogZmlsZS5zaXplLFxyXG4gICAgICBtaW1lVHlwZTogZmlsZS50eXBlLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiByZXNwb25zZSxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGRhdGE6IGJhc2U2NERhdGFcclxuICAgIH07XHJcblxyXG4gICAgYXdhaXQgaW5zZXJ0RGF0YSgnYXVkaW8nLCBKU09OLnN0cmluZ2lmeShwcm9jZXNzZWREYXRhKSk7XHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkRGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyBhdWRpbzonLCBlcnJvcik7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZmFsbGJhY2sgcHJvY2Vzc2VkIHJlc3VsdCB3aXRoIGVycm9yIGluZm9ybWF0aW9uXHJcbiAgICBjb25zdCBlcnJvckRhdGEgPSB7XHJcbiAgICAgIG9yaWdpbmFsTmFtZTogZmlsZSA/IGZpbGUubmFtZSA6ICd1bmtub3duJyxcclxuICAgICAgdHlwZTogJ2F1ZGlvJyxcclxuICAgICAgc2l6ZTogZmlsZSA/IGZpbGUuc2l6ZSA6IDAsXHJcbiAgICAgIG1pbWVUeXBlOiBmaWxlID8gZmlsZS50eXBlIDogJ3Vua25vd24nLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiBgRXJyb3I6IFVuYWJsZSB0byBwcm9jZXNzIGF1ZGlvLiAke2Vycm9yLm1lc3NhZ2V9YCxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGVycm9yOiB0cnVlXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFN0aWxsIHN0b3JlIHRoZSBlcnJvciByZXN1bHQgc28gdXNlciBjYW4gc2VlIGl0IGluIHZpc3VhbGl6YXRpb25zXHJcbiAgICBhd2FpdCBpbnNlcnREYXRhKCdhdWRpbycsIEpTT04uc3RyaW5naWZ5KGVycm9yRGF0YSkpO1xyXG5cclxuICAgIC8vIFJldHVybiB0aGUgZXJyb3IgZGF0YSByYXRoZXIgdGhhbiB0aHJvd2luZ1xyXG4gICAgcmV0dXJuIGVycm9yRGF0YTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBQcm9jZXNzIHRleHQgd2l0aCBBSVxyXG5jb25zdCBwcm9jZXNzVGV4dCA9IGFzeW5jICh0ZXh0KSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGlmICghdGV4dCB8fCB0eXBlb2YgdGV4dCAhPT0gJ3N0cmluZycgfHwgdGV4dC50cmltKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBvciBlbXB0eSB0ZXh0IGlucHV0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsbCBBSSBzZXJ2aWNlIGZvciB0ZXh0IGFuYWx5c2lzXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoQUlQcm9jZXNzaW5nKCd0ZXh0JywgdGV4dCk7XHJcblxyXG4gICAgLy8gU3RvcmUgdGhlIHByb2Nlc3NlZCByZXN1bHRcclxuICAgIGNvbnN0IHByb2Nlc3NlZERhdGEgPSB7XHJcbiAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgY29udGVudDogdGV4dCxcclxuICAgICAgcHJvY2Vzc2luZ1Jlc3VsdDogcmVzcG9uc2UsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICB9O1xyXG5cclxuICAgIGF3YWl0IGluc2VydERhdGEoJ3RleHQnLCBKU09OLnN0cmluZ2lmeShwcm9jZXNzZWREYXRhKSk7XHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkRGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyB0ZXh0OicsIGVycm9yKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBmYWxsYmFjayBwcm9jZXNzZWQgcmVzdWx0IHdpdGggZXJyb3IgaW5mb3JtYXRpb25cclxuICAgIGNvbnN0IGVycm9yRGF0YSA9IHtcclxuICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICBjb250ZW50OiB0ZXh0IHx8ICcnLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiBgRXJyb3I6IFVuYWJsZSB0byBwcm9jZXNzIHRleHQuICR7ZXJyb3IubWVzc2FnZX1gLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgZXJyb3I6IHRydWVcclxuICAgIH07XHJcblxyXG4gICAgLy8gU3RpbGwgc3RvcmUgdGhlIGVycm9yIHJlc3VsdCBzbyB1c2VyIGNhbiBzZWUgaXQgaW4gdmlzdWFsaXphdGlvbnNcclxuICAgIGF3YWl0IGluc2VydERhdGEoJ3RleHQnLCBKU09OLnN0cmluZ2lmeShlcnJvckRhdGEpKTtcclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIGVycm9yIGRhdGEgcmF0aGVyIHRoYW4gdGhyb3dpbmdcclxuICAgIHJldHVybiBlcnJvckRhdGE7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gRnVuY3Rpb24gdG8gY2FsbCByZWxldmFudCBBUEkgZm9yIHByb2Nlc3NpbmcgYmFzZWQgb24gbWVkaWEgdHlwZVxyXG5jb25zdCBmZXRjaEFJUHJvY2Vzc2luZyA9IGFzeW5jIChtZWRpYVR5cGUsIGNvbnRlbnQsIGZpbGVuYW1lID0gJycpID0+IHtcclxuICAvLyBHZXQgQVBJIGtleXMgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZXNcclxuICBjb25zdCBvcGVuQUlBcGlLZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19PUEVOQUlfQVBJX0tFWTtcclxuICBjb25zdCBvcGVuUm91dGVyQXBpS2V5ID0gcHJvY2Vzcy5lbnYuT1BFTlJPVVRFUl9BUElfS0VZO1xyXG5cclxuICAvLyBFbnN1cmUgd2UgaGF2ZSBhbiBBUEkga2V5XHJcbiAgaWYgKCFvcGVuQUlBcGlLZXkgJiYgIW9wZW5Sb3V0ZXJBcGlLZXkpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0FQSSBrZXkgbm90IGZvdW5kIGluIGVudmlyb25tZW50IHZhcmlhYmxlcycpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdBUEkga2V5IGlzIHJlcXVpcmVkIGZvciBtZWRpYSBwcm9jZXNzaW5nJyk7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgc3dpdGNoKG1lZGlhVHlwZSkge1xyXG4gICAgICBjYXNlICdpbWFnZSc6XHJcbiAgICAgICAgLy8gVXNlIE9wZW5BSSBHUFQtNCBWaXNpb24gb3Igc2ltaWxhciBtb2RlbCBmb3IgaW1hZ2UgYW5hbHlzaXNcclxuICAgICAgICByZXR1cm4gYXdhaXQgcHJvY2Vzc0ltYWdlV2l0aEdQVDRWaXNpb24ob3BlbkFJQXBpS2V5LCBjb250ZW50LCBmaWxlbmFtZSk7XHJcbiAgICAgIGNhc2UgJ2F1ZGlvJzpcclxuICAgICAgICAvLyBVc2UgT3BlbkFJIFdoaXNwZXIgb3Igc2ltaWxhciBtb2RlbCBmb3IgYXVkaW8gcHJvY2Vzc2luZ1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBwcm9jZXNzQXVkaW9XaXRoV2hpc3BlcihvcGVuQUlBcGlLZXksIGNvbnRlbnQsIGZpbGVuYW1lKTtcclxuICAgICAgY2FzZSAndmlkZW8nOlxyXG4gICAgICAgIC8vIFVzZSBzcGVjaWFsaXplZCB2aWRlbyBwcm9jZXNzaW5nIGJ5IGV4dHJhY3RpbmcgZnJhbWVzIGFuZCBhdWRpb1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBwcm9jZXNzVmlkZW9XaXRoRnJhbWVFeHRyYWN0aW9uKG9wZW5BSUFwaUtleSwgY29udGVudCwgZmlsZW5hbWUpO1xyXG4gICAgICBjYXNlICd0ZXh0JzpcclxuICAgICAgICAvLyBVc2UgT3BlblJvdXRlciBmb3IgdGV4dCBwcm9jZXNzaW5nIChhcyBpdCBoYXMgbW9yZSBjb3N0LWVmZmVjdGl2ZSBvcHRpb25zKVxyXG4gICAgICAgIHJldHVybiBhd2FpdCBwcm9jZXNzVGV4dFdpdGhHUFQob3BlblJvdXRlckFwaUtleSB8fCBvcGVuQUlBcGlLZXksIGNvbnRlbnQpO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbWVkaWEgdHlwZTogJHttZWRpYVR5cGV9YCk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGluIEFJIHByb2Nlc3NpbmcgZm9yICR7bWVkaWFUeXBlfTpgLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn07XHJcblxyXG4vLyBQcm9jZXNzIGltYWdlIHdpdGggT3BlbkFJIFZpc2lvbiBtb2RlbHNcclxuY29uc3QgcHJvY2Vzc0ltYWdlV2l0aEdQVDRWaXNpb24gPSBhc3luYyAoYXBpS2V5LCBpbWFnZURhdGEsIGZpbGVuYW1lKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnNvbGUubG9nKCdQcm9jZXNzaW5nIGltYWdlIHdpdGggT3BlbkFJIFZpc2lvbiBtb2RlbHMuLi4nKTtcclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgdXNpbmcgT3BlblJvdXRlciBvciBPcGVuQUkgYmFzZWQgb24gdGhlIEFQSSBrZXkgZm9ybWF0XHJcbiAgICAvLyBPcGVuUm91dGVyIGtleXMgc3RhcnQgd2l0aCBzay1vci0sIE9wZW5BSSBrZXlzIHN0YXJ0IHdpdGggc2stIChpbmNsdWRpbmcgc2stcHJvai0pXHJcbiAgICBjb25zdCBpc09wZW5Sb3V0ZXIgPSBhcGlLZXkuc3RhcnRzV2l0aCgnc2stb3ItJyk7XHJcbiAgICBsZXQgbW9kZWw7XHJcbiAgICBsZXQgZW5kcG9pbnQ7XHJcbiAgICBsZXQgaGVhZGVycyA9IHtcclxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7YXBpS2V5fWBcclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vIExvZyBBUEkga2V5IGZvcm1hdCBmb3IgZGVidWdnaW5nICh3aXRob3V0IHJldmVhbGluZyB0aGUgZnVsbCBrZXkpXHJcbiAgICBjb25zb2xlLmxvZyhgQVBJIGtleSBmb3JtYXQ6ICR7YXBpS2V5LnN1YnN0cmluZygwLCA3KX0uLi5gKTtcclxuXHJcbiAgICAvLyBTZWxlY3QgYXBwcm9wcmlhdGUgbW9kZWwgYW5kIGVuZHBvaW50IGJhc2VkIG9uIEFQSSBrZXkgdHlwZVxyXG4gICAgaWYgKGlzT3BlblJvdXRlcikge1xyXG4gICAgICBtb2RlbCA9ICdvcGVuYWkvZ3B0LTQtdmlzaW9uLXByZXZpZXcnOyAvLyBPcGVuUm91dGVyIGZvcm1hdCBmb3IgVmlzaW9uIG1vZGVsXHJcbiAgICAgIGVuZHBvaW50ID0gJ2h0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjEvY2hhdC9jb21wbGV0aW9ucyc7XHJcbiAgICAgIGhlYWRlcnNbJ0hUVFAtUmVmZXJlciddID0gJ2h0dHBzOi8vcHJlY2VrLmFwcCc7IC8vIFJlcXVpcmVkIGJ5IE9wZW5Sb3V0ZXJcclxuICAgICAgY29uc29sZS5sb2coJ1VzaW5nIE9wZW5Sb3V0ZXIgZm9yIGltYWdlIHByb2Nlc3NpbmcnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFVzaW5nIE9wZW5BSSBkaXJlY3RseVxyXG4gICAgICBtb2RlbCA9ICdncHQtNC12aXNpb24tcHJldmlldyc7IC8vIExhdGVzdCB2aXNpb24gbW9kZWxcclxuICAgICAgZW5kcG9pbnQgPSAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJztcclxuICAgICAgY29uc29sZS5sb2coJ1VzaW5nIE9wZW5BSSBkaXJlY3RseSBmb3IgaW1hZ2UgcHJvY2Vzc2luZycpO1xyXG4gICAgfSAgICAvLyBQcm9jZXNzIHRoZSBpbWFnZSBkYXRhIC0gbWFrZSBzdXJlIHdlIGhhdmUgYSBwcm9wZXIgZm9ybWF0XHJcbiAgICBsZXQgYmFzZTY0SW1hZ2UgPSBpbWFnZURhdGE7XHJcbiAgICBsZXQgaW1hZ2VVcmw7XHJcbiAgICBcclxuICAgIC8vIEdldCBpbWFnZSBkZXRhaWxzXHJcbiAgICBjb25zdCBpbWdEZXRhaWxzID0gYXdhaXQgZ2V0SW1hZ2VEZXRhaWxzKGltYWdlRGF0YSk7XHJcbiAgICBjb25zb2xlLmxvZyhgSW1hZ2UgdmFsaWRhdGVkOiAke2ZpbGVuYW1lfSAoJHtpbWdEZXRhaWxzLndpZHRofXgke2ltZ0RldGFpbHMuaGVpZ2h0fSwgJHtpbWdEZXRhaWxzLmZvcm1hdH0pYCk7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGltYWdlIGRhdGEgaXMgYWxyZWFkeSBhIFVSTCBvciBuZWVkcyB0byBiZSBjb252ZXJ0ZWQgdG8gYmFzZTY0XHJcbiAgICBpZiAoYmFzZTY0SW1hZ2Uuc3RhcnRzV2l0aCgnaHR0cCcpKSB7XHJcbiAgICAgIC8vIElmIGl0J3MgYWxyZWFkeSBhIFVSTCwgdXNlIGl0IGRpcmVjdGx5XHJcbiAgICAgIGltYWdlVXJsID0gYmFzZTY0SW1hZ2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBJZiBpdCdzIGJhc2U2NCBkYXRhLCBleHRyYWN0IHRoZSBiYXNlNjQgcGFydCBpZiBuZWVkZWRcclxuICAgICAgaWYgKGJhc2U2NEltYWdlLmluY2x1ZGVzKCcsJykpIHtcclxuICAgICAgICAvLyBFeHRyYWN0IHRoZSBiYXNlNjQgcGFydCBhZnRlciB0aGUgY29tbWEgaWYgaXQncyBhIGRhdGEgVVJMXHJcbiAgICAgICAgYmFzZTY0SW1hZ2UgPSBiYXNlNjRJbWFnZS5zcGxpdCgnLCcpWzFdO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIEZvcm1hdCBhcyBhIGRhdGEgVVJMXHJcbiAgICAgIGltYWdlVXJsID0gYGRhdGE6JHtpbWdEZXRhaWxzLm1pbWVUeXBlfTtiYXNlNjQsJHtiYXNlNjRJbWFnZX1gO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgQVBJIHJlcXVlc3QgYm9keSBhY2NvcmRpbmcgdG8gT3BlbkFJIGRvY3VtZW50YXRpb25cclxuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0ge1xyXG4gICAgICBtb2RlbDogbW9kZWwsXHJcbiAgICAgIG1lc3NhZ2VzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcm9sZTogJ3N5c3RlbScsXHJcbiAgICAgICAgICBjb250ZW50OiAnWW91IGFyZSBhbiBpbWFnZSBhbmFseXNpcyBhc3Npc3RhbnQuIEFuYWx5emUgaW1hZ2VzIHRob3JvdWdobHkgYW5kIGFjY3VyYXRlbHkuJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcm9sZTogJ3VzZXInLFxyXG4gICAgICAgICAgY29udGVudDogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICAgIHRleHQ6IGBQbGVhc2UgYW5hbHl6ZSB0aGlzIGltYWdlIHRob3JvdWdobHkgYW5kIHByb3ZpZGU6XHJcbjEuIERlc2NyaXB0aW9uIG9mIG1haW4gc3ViamVjdHMgYW5kIGVsZW1lbnRzXHJcbjIuIENvbG9ycywgbGlnaHRpbmcsIGFuZCBjb21wb3NpdGlvbiBhbmFseXNpc1xyXG4zLiBBbnkgdGV4dCB2aXNpYmxlIGluIHRoZSBpbWFnZSAodHJhbnNjcmliZSBleGFjdGx5KVxyXG40LiBDb250ZXh0IGFuZCBwb3RlbnRpYWwgbWVhbmluZy9wdXJwb3NlIG9mIHRoZSBpbWFnZVxyXG41LiBBbnkgbm90YWJsZSBvYmplY3RzLCBsYW5kbWFya3MsIG9yIHBlb3BsZVxyXG42LiBJbWFnZSBxdWFsaXR5IGFuZCB0ZWNobmljYWwgYXNzZXNzbWVudFxyXG5cclxuRmlsZW5hbWU6ICR7ZmlsZW5hbWUgfHwgJ3VwbG9hZGVkIGltYWdlJ31gXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2VfdXJsJyxcclxuICAgICAgICAgICAgICBpbWFnZV91cmw6IHtcclxuICAgICAgICAgICAgICAgIHVybDogaW1hZ2VVcmxcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICAgIF0sXHJcbiAgICAgIG1heF90b2tlbnM6IDEwMDAsXHJcbiAgICAgIHRlbXBlcmF0dXJlOiAwLjdcclxuICAgIH07XHJcblxyXG4gICAgLy8gTWFrZSB0aGUgQVBJIHJlcXVlc3RcclxuICAgIGNvbnNvbGUubG9nKGBTZW5kaW5nIHJlcXVlc3QgdG8gJHtpc09wZW5Sb3V0ZXIgPyAnT3BlblJvdXRlcicgOiAnT3BlbkFJJ30gQVBJLi4uYCk7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zKHtcclxuICAgICAgbWV0aG9kOiAncG9zdCcsXHJcbiAgICAgIHVybDogZW5kcG9pbnQsXHJcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXHJcbiAgICAgIGRhdGE6IHJlcXVlc3RCb2R5LFxyXG4gICAgICB0aW1lb3V0OiA2MDAwMCAvLyA2MCBzZWNvbmQgdGltZW91dCBmb3IgaW1hZ2UgcHJvY2Vzc2luZ1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5jaG9pY2VzICYmIHJlc3BvbnNlLmRhdGEuY2hvaWNlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdJbWFnZSBzdWNjZXNzZnVsbHkgcHJvY2Vzc2VkIGJ5IHZpc2lvbiBtb2RlbCcpO1xyXG4gICAgICByZXR1cm4gZm9ybWF0SW1hZ2VBbmFseXNpcyhyZXNwb25zZS5kYXRhLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50LCBmaWxlbmFtZSwgaW1nRGV0YWlscyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIEFQSSByZXNwb25zZSBmb3JtYXQ6JywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHByb2Nlc3MgaW1hZ2Ugd2l0aCBBSSBtb2RlbDogaW52YWxpZCByZXNwb25zZSBmb3JtYXQnKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignSW1hZ2UgcHJvY2Vzc2luZyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAvLyBDaGVjayBmb3Igc3BlY2lmaWMgQVBJIGVycm9yIHR5cGVzXHJcbiAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcclxuICAgICAgY29uc3Qgc3RhdHVzID0gZXJyb3IucmVzcG9uc2Uuc3RhdHVzO1xyXG4gICAgICBjb25zdCBkYXRhID0gZXJyb3IucmVzcG9uc2UuZGF0YTtcclxuICAgICAgXHJcbiAgICAgIGlmIChzdGF0dXMgPT09IDQwMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW1hZ2UgcHJvY2Vzc2luZyBmYWlsZWQ6IEJhZCByZXF1ZXN0IC0gJHtkYXRhLmVycm9yPy5tZXNzYWdlIHx8ICdJbnZhbGlkIHJlcXVlc3QgcGFyYW1ldGVycyd9YCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltYWdlIHByb2Nlc3NpbmcgZmFpbGVkOiBJbnZhbGlkIEFQSSBrZXkgb3IgdW5hdXRob3JpemVkIGFjY2VzcycpO1xyXG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDI5KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbWFnZSBwcm9jZXNzaW5nIGZhaWxlZDogUmF0ZSBsaW1pdCBleGNlZWRlZCBvciBpbnN1ZmZpY2llbnQgcXVvdGEnKTtcclxuICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDUwMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW1hZ2UgcHJvY2Vzc2luZyBmYWlsZWQ6IE9wZW5BSSBzZXJ2aWNlIGVycm9yJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gR2VuZXJpYyBlcnJvciBpZiBub3QgY2F1Z2h0IGJ5IHNwZWNpZmljcyBhYm92ZVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbWFnZSBwcm9jZXNzaW5nIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgaW1hZ2UgZGV0YWlsc1xyXG5jb25zdCBnZXRJbWFnZURldGFpbHMgPSBhc3luYyAoaW1hZ2VEYXRhKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgXHJcbiAgICBpbWcub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAvLyBHZXQgaW1hZ2UgZm9ybWF0IGZyb20gZGF0YSBVUkxcclxuICAgICAgbGV0IGZvcm1hdCA9ICdqcGVnJzsgLy8gRGVmYXVsdFxyXG4gICAgICBsZXQgbWltZVR5cGUgPSAnaW1hZ2UvanBlZyc7IC8vIERlZmF1bHRcclxuICAgICAgXHJcbiAgICAgIGlmIChpbWFnZURhdGEuaW5jbHVkZXMoJ2RhdGE6JykpIHtcclxuICAgICAgICBjb25zdCBtaW1lTWF0Y2ggPSBpbWFnZURhdGEubWF0Y2goL2RhdGE6KFteO10rKTsvKTtcclxuICAgICAgICBpZiAobWltZU1hdGNoICYmIG1pbWVNYXRjaFsxXSkge1xyXG4gICAgICAgICAgbWltZVR5cGUgPSBtaW1lTWF0Y2hbMV07XHJcbiAgICAgICAgICBmb3JtYXQgPSBtaW1lTWF0Y2hbMV0uc3BsaXQoJy8nKVsxXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgIHdpZHRoOiBpbWcud2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0OiBpbWcuaGVpZ2h0LFxyXG4gICAgICAgIGZvcm1hdDogZm9ybWF0LFxyXG4gICAgICAgIG1pbWVUeXBlOiBtaW1lVHlwZSxcclxuICAgICAgICBhc3BlY3RSYXRpbzogaW1nLndpZHRoIC8gaW1nLmhlaWdodFxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGltZy5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICByZWplY3QobmV3IEVycm9yKCdGYWlsZWQgdG8gbG9hZCBpbWFnZSBmb3IgYW5hbHlzaXMnKSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBpbWcuc3JjID0gaW1hZ2VEYXRhO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gRm9ybWF0IHRoZSBpbWFnZSBhbmFseXNpcyBpbiBhIHN0cnVjdHVyZWQgd2F5XHJcbmNvbnN0IGZvcm1hdEltYWdlQW5hbHlzaXMgPSAoY29udGVudCwgZmlsZW5hbWUsIGltYWdlRGV0YWlscykgPT4ge1xyXG4gIHJldHVybiBgIyBJbWFnZSBBbmFseXNpczogJHtmaWxlbmFtZSB8fCAnVXBsb2FkZWQgSW1hZ2UnfVxyXG5cclxuIyMgVGVjaG5pY2FsIERldGFpbHNcclxuLSBEaW1lbnNpb25zOiAke2ltYWdlRGV0YWlscy53aWR0aH14JHtpbWFnZURldGFpbHMuaGVpZ2h0fSBwaXhlbHNcclxuLSBGb3JtYXQ6ICR7aW1hZ2VEZXRhaWxzLmZvcm1hdC50b1VwcGVyQ2FzZSgpfVxyXG4tIEFzcGVjdCBSYXRpbzogJHtpbWFnZURldGFpbHMuYXNwZWN0UmF0aW8udG9GaXhlZCgyKX1cclxuXHJcbiMjIEFuYWx5c2lzXHJcbiR7Y29udGVudH1cclxuXHJcbi0tLVxyXG4qQW5hbHl6ZWQgd2l0aCBPcGVuQUkgVmlzaW9uIE1vZGVsKmA7XHJcbn07XHJcblxyXG4vLyBQcm9jZXNzIGF1ZGlvIHdpdGggV2hpc3BlciBBUEkgYWNjb3JkaW5nIHRvIE9wZW5BSSBkb2NzXHJcbi8vIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dC9xdWlja3N0YXJ0XHJcbmNvbnN0IHByb2Nlc3NBdWRpb1dpdGhXaGlzcGVyID0gYXN5bmMgKGFwaUtleSwgYXVkaW9EYXRhLCBmaWxlbmFtZSkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZygnUHJvY2Vzc2luZyBhdWRpbyB3aXRoIFdoaXNwZXIgQVBJLi4uJyk7XHJcblxyXG4gICAgLy8gQ29udmVydCBiYXNlNjQgYXVkaW8gZGF0YSB0byBhIEJsb2JcclxuICAgIGxldCBhdWRpb0Jhc2U2NCA9IGF1ZGlvRGF0YTtcclxuICAgIGlmIChhdWRpb0Jhc2U2NC5pbmNsdWRlcygnLCcpKSB7XHJcbiAgICAgIGF1ZGlvQmFzZTY0ID0gYXVkaW9CYXNlNjQuc3BsaXQoJywnKVsxXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZXRlcm1pbmUgdGhlIGNvbnRlbnQgdHlwZSBmcm9tIHRoZSBkYXRhIFVSTCBvciBmaWxlbmFtZVxyXG4gICAgY29uc3QgY29udGVudFR5cGUgPSBhdWRpb0RhdGEuaW5jbHVkZXMoJ2RhdGE6JylcclxuICAgICAgPyBhdWRpb0RhdGEuc3BsaXQoJzsnKVswXS5zcGxpdCgnOicpWzFdXHJcbiAgICAgIDogZmlsZW5hbWUuZW5kc1dpdGgoJy5tcDMnKSA/ICdhdWRpby9tcDMnIDogJ2F1ZGlvL21wZWcnO1xyXG5cclxuICAgIC8vIENvbnZlcnQgYmFzZTY0IHRvIGEgQmxvYiAoaW1wb3J0YW50IGZvciBGb3JtRGF0YSlcclxuICAgIGNvbnN0IGJ5dGVDaGFyYWN0ZXJzID0gYXRvYihhdWRpb0Jhc2U2NCk7XHJcbiAgICBjb25zdCBieXRlQXJyYXlzID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgYnl0ZUNoYXJhY3RlcnMubGVuZ3RoOyBvZmZzZXQgKz0gMTAyNCkge1xyXG4gICAgICBjb25zdCBzbGljZSA9IGJ5dGVDaGFyYWN0ZXJzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgMTAyNCk7XHJcblxyXG4gICAgICBjb25zdCBieXRlTnVtYmVycyA9IG5ldyBBcnJheShzbGljZS5sZW5ndGgpO1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWNlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgYnl0ZU51bWJlcnNbaV0gPSBzbGljZS5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBieXRlQXJyYXkgPSBuZXcgVWludDhBcnJheShieXRlTnVtYmVycyk7XHJcbiAgICAgIGJ5dGVBcnJheXMucHVzaChieXRlQXJyYXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGF1ZGlvQmxvYiA9IG5ldyBCbG9iKGJ5dGVBcnJheXMsIHsgdHlwZTogY29udGVudFR5cGUgfSk7XHJcbiAgICBjb25zb2xlLmxvZyhgQ3JlYXRlZCBhdWRpbyBibG9iIG9mIHR5cGUgJHtjb250ZW50VHlwZX0sIHNpemU6ICR7YXVkaW9CbG9iLnNpemV9IGJ5dGVzYCk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZm9ybSBkYXRhIG9iamVjdCBhcyByZXF1aXJlZCBieSB0aGUgV2hpc3BlciBBUElcclxuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBhdWRpb0Jsb2IsIGZpbGVuYW1lIHx8ICdhdWRpby5tcDMnKTtcclxuICAgIGZvcm1EYXRhLmFwcGVuZCgnbW9kZWwnLCAnd2hpc3Blci0xJyk7XHJcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ3Jlc3BvbnNlX2Zvcm1hdCcsICdqc29uJyk7IC8vIEdldCBzdHJ1Y3R1cmVkIEpTT04gcmVzcG9uc2VcclxuICAgIGZvcm1EYXRhLmFwcGVuZCgnbGFuZ3VhZ2UnLCAnZW4nKTsgLy8gU2V0IHRvIEVuZ2xpc2ggZm9yIGJldHRlciBhY2N1cmFjeVxyXG5cclxuICAgIC8vIENhbGwgdGhlIE9wZW5BSSBXaGlzcGVyIEFQSVxyXG4gICAgY29uc29sZS5sb2coJ1NlbmRpbmcgcmVxdWVzdCB0byBXaGlzcGVyIEFQSS4uLicpO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcyh7XHJcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICB1cmw6ICdodHRwczovL2FwaS5vcGVuYWkuY29tL3YxL2F1ZGlvL3RyYW5zY3JpcHRpb25zJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke2FwaUtleX1gXHJcbiAgICAgICAgLy8gQ29udGVudC1UeXBlIGlzIHNldCBhdXRvbWF0aWNhbGx5IGJ5IGF4aW9zIHdpdGggRm9ybURhdGFcclxuICAgICAgfSxcclxuICAgICAgZGF0YTogZm9ybURhdGFcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgYSB2YWxpZCByZXNwb25zZVxyXG4gICAgaWYgKHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS50ZXh0KSB7XHJcbiAgICAgIGNvbnN0IHRyYW5zY3JpcHRpb24gPSByZXNwb25zZS5kYXRhLnRleHQ7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgdHJhbnNjcmliZWQgYXVkaW8nKTtcclxuXHJcbiAgICAgIC8vIE5vdyBhbmFseXplIHRoZSB0cmFuc2NyaXB0aW9uIHdpdGggR1BUXHJcbiAgICAgIGNvbnNvbGUubG9nKCdBbmFseXppbmcgdHJhbnNjcmlwdGlvbiBjb250ZW50Li4uJyk7XHJcbiAgICAgIGNvbnN0IGFuYWx5c2lzUmVzcG9uc2UgPSBhd2FpdCBheGlvcyh7XHJcbiAgICAgICAgbWV0aG9kOiAncG9zdCcsXHJcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7YXBpS2V5fWBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIG1vZGVsOiAnZ3B0LTMuNS10dXJibycsXHJcbiAgICAgICAgICBtZXNzYWdlczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxyXG4gICAgICAgICAgICAgIGNvbnRlbnQ6IGBBbmFseXplIHRoaXMgYXVkaW8gdHJhbnNjcmlwdGlvbiBhbmQgcHJvdmlkZSBhIHN1bW1hcnkgb2Yga2V5IHBvaW50cywgdG9waWNzLCBhbmQgYW55IG5vdGFibGUgcGF0dGVybnMgb3IgaW5zaWdodHM6XFxuXFxuJHt0cmFuc2NyaXB0aW9ufWBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXSxcclxuICAgICAgICAgIG1heF90b2tlbnM6IDUwMFxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBDb21iaW5lIHRyYW5zY3JpcHRpb24gYW5kIGFuYWx5c2lzXHJcbiAgICAgIGlmIChhbmFseXNpc1Jlc3BvbnNlLmRhdGEgJiYgYW5hbHlzaXNSZXNwb25zZS5kYXRhLmNob2ljZXMgJiZcclxuICAgICAgICAgIGFuYWx5c2lzUmVzcG9uc2UuZGF0YS5jaG9pY2VzLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgIGFuYWx5c2lzUmVzcG9uc2UuZGF0YS5jaG9pY2VzWzBdLm1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gYCMjIEF1ZGlvIFRyYW5zY3JpcHRpb25cXG5cXG4ke3RyYW5zY3JpcHRpb259XFxuXFxuIyMgQW5hbHlzaXNcXG5cXG4ke2FuYWx5c2lzUmVzcG9uc2UuZGF0YS5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudH1gO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBgIyMgQXVkaW8gVHJhbnNjcmlwdGlvblxcblxcbiR7dHJhbnNjcmlwdGlvbn1cXG5cXG4oQW5hbHlzaXMgdW5hdmFpbGFibGUpYDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBBUEkgcmVzcG9uc2UgZm9ybWF0OicsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byB0cmFuc2NyaWJlIGF1ZGlvOiB1bmV4cGVjdGVkIHJlc3BvbnNlIGZvcm1hdCcpO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdBdWRpbyBwcm9jZXNzaW5nIGVycm9yOicsIGVycm9yKTtcclxuICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdBUEkgZXJyb3IgcmVzcG9uc2U6JywgZXJyb3IucmVzcG9uc2UuZGF0YSk7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEF1ZGlvIHByb2Nlc3NpbmcgZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gUHJvY2VzcyB2aWRlbyBieSBleHRyYWN0aW5nIG11bHRpcGxlIGZyYW1lcyBmb3IgYW5hbHlzaXNcclxuY29uc3QgcHJvY2Vzc1ZpZGVvV2l0aEZyYW1lRXh0cmFjdGlvbiA9IGFzeW5jIChhcGlLZXksIHZpZGVvRGF0YSwgZmlsZW5hbWUpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc29sZS5sb2coJ1Byb2Nlc3NpbmcgdmlkZW8gd2l0aCBmcmFtZSBleHRyYWN0aW9uLi4uJyk7XHJcblxyXG4gICAgLy8gQ29udmVydCBkYXRhIFVSTCB0byBCbG9iIGZvciB2aWRlbyBlbGVtZW50XHJcbiAgICBjb25zdCB2aWRlb0Jsb2IgPSBhd2FpdCBmZXRjaCh2aWRlb0RhdGEpLnRoZW4ocmVzID0+IHJlcy5ibG9iKCkpO1xyXG4gICAgY29uc3QgdmlkZW9VcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHZpZGVvQmxvYik7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgdmlkZW8gZWxlbWVudCB0byBleHRyYWN0IGZyYW1lc1xyXG4gICAgY29uc3QgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xyXG4gICAgdmlkZW8ubXV0ZWQgPSB0cnVlOyAvLyBSZXF1aXJlZCBmb3IgYXV0b3BsYXkgaW4gc29tZSBicm93c2Vyc1xyXG4gICAgdmlkZW8ucGxheXNJbmxpbmUgPSB0cnVlO1xyXG4gICAgdmlkZW8uY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcclxuICAgIHZpZGVvLnNyYyA9IHZpZGVvVXJsO1xyXG5cclxuICAgIC8vIFdhaXQgZm9yIG1ldGFkYXRhIHRvIGxvYWRcclxuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdmlkZW8ub25sb2FkZWRtZXRhZGF0YSA9IHJlc29sdmU7XHJcbiAgICAgIHZpZGVvLm9uZXJyb3IgPSByZWplY3Q7XHJcbiAgICAgIHZpZGVvLmxvYWQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGBWaWRlbyBsb2FkZWQ6IER1cmF0aW9uICR7dmlkZW8uZHVyYXRpb259cywgRGltZW5zaW9uczogJHt2aWRlby52aWRlb1dpZHRofXgke3ZpZGVvLnZpZGVvSGVpZ2h0fWApO1xyXG5cclxuICAgIC8vIEV4dHJhY3QgbXVsdGlwbGUgZnJhbWVzIGZyb20gZGlmZmVyZW50IHBvaW50cyBpbiB0aGUgdmlkZW9cclxuICAgIGNvbnN0IGZyYW1lQ291bnQgPSBNYXRoLm1pbigzLCBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHZpZGVvLmR1cmF0aW9uIC8gNSkpKTtcclxuICAgIGNvbnN0IGZyYW1lcyA9IFtdO1xyXG5cclxuICAgIC8vIENyZWF0ZSBjYW52YXMgZm9yIGZyYW1lIGV4dHJhY3Rpb25cclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgY2FudmFzLndpZHRoID0gdmlkZW8udmlkZW9XaWR0aDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSB2aWRlby52aWRlb0hlaWdodDtcclxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICAgIC8vIEV4dHJhY3QgZnJhbWVzIGF0IGRpZmZlcmVudCB0aW1lc3RhbXBzXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lQ291bnQ7IGkrKykge1xyXG4gICAgICBjb25zdCB0aW1lc3RhbXAgPSBpICogKHZpZGVvLmR1cmF0aW9uIC8gKGZyYW1lQ291bnQgKyAxKSk7XHJcblxyXG4gICAgICAvLyBTZWVrIHRvIHRpbWVzdGFtcFxyXG4gICAgICB2aWRlby5jdXJyZW50VGltZSA9IHRpbWVzdGFtcDtcclxuXHJcbiAgICAgIC8vIFdhaXQgZm9yIHNlZWsgdG8gY29tcGxldGVcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgdmlkZW8ub25zZWVrZWQgPSByZXNvbHZlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIERyYXcgZnJhbWUgdG8gY2FudmFzXHJcbiAgICAgIGN0eC5kcmF3SW1hZ2UodmlkZW8sIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAvLyBHZXQgZnJhbWUgYXMgZGF0YSBVUkxcclxuICAgICAgY29uc3QgZnJhbWVEYXRhVXJsID0gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvanBlZycsIDAuOCk7XHJcblxyXG4gICAgICBmcmFtZXMucHVzaCh7XHJcbiAgICAgICAgdGltZXN0YW1wLFxyXG4gICAgICAgIGRhdGFVcmw6IGZyYW1lRGF0YVVybFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGBFeHRyYWN0ZWQgZnJhbWUgYXQgJHt0aW1lc3RhbXAudG9GaXhlZCgyKX1zYCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2xlYW4gdXAgdmlkZW8gcmVzb3VyY2VzXHJcbiAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHZpZGVvVXJsKTtcclxuXHJcbiAgICAvLyBBbmFseXplIGZyYW1lcyB3aXRoIFZpc2lvbiBBUElcclxuICAgIGNvbnNvbGUubG9nKCdBbmFseXppbmcgdmlkZW8gZnJhbWVzIHdpdGggVmlzaW9uIEFQSS4uLicpO1xyXG4gICAgY29uc3QgZnJhbWVBbmFseXNlcyA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnJhbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGZyYW1lID0gZnJhbWVzW2ldO1xyXG4gICAgICBjb25zdCBhbmFseXNpcyA9IGF3YWl0IHByb2Nlc3NJbWFnZVdpdGhHUFQ0VmlzaW9uKFxyXG4gICAgICAgIGFwaUtleSxcclxuICAgICAgICBmcmFtZS5kYXRhVXJsLFxyXG4gICAgICAgIGBGcmFtZSBhdCAke2ZyYW1lLnRpbWVzdGFtcC50b0ZpeGVkKDIpfXMgZnJvbSAke2ZpbGVuYW1lfWBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGZyYW1lQW5hbHlzZXMucHVzaCh7XHJcbiAgICAgICAgdGltZXN0YW1wOiBmcmFtZS50aW1lc3RhbXAsXHJcbiAgICAgICAgYW5hbHlzaXNcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ29tYmluZSBhbGwgZnJhbWUgYW5hbHlzZXMgaW50byBhIGNvbXByZWhlbnNpdmUgdmlkZW8gYW5hbHlzaXNcclxuICAgIGNvbnN0IGZvcm1hdHRlZEFuYWx5c2VzID0gZnJhbWVBbmFseXNlcy5tYXAoZmEgPT5cclxuICAgICAgYCMjIyBGcmFtZSBhdCAke2ZhLnRpbWVzdGFtcC50b0ZpeGVkKDIpfXM6XFxuJHtmYS5hbmFseXNpc31gXHJcbiAgICApLmpvaW4oJ1xcblxcbicpO1xyXG5cclxuICAgIHJldHVybiBgIyBWaWRlbyBBbmFseXNpcyBmb3I6ICR7ZmlsZW5hbWV9XHJcblxyXG4jIyBUZWNobmljYWwgRGV0YWlsc1xyXG4tIER1cmF0aW9uOiAke01hdGgucm91bmQodmlkZW8uZHVyYXRpb24pfSBzZWNvbmRzXHJcbi0gRGltZW5zaW9uczogJHt2aWRlby52aWRlb1dpZHRofXgke3ZpZGVvLnZpZGVvSGVpZ2h0fVxyXG4tIEZvcm1hdDogJHt2aWRlb0Jsb2IudHlwZX1cclxuLSBGaWxlIFNpemU6ICR7KHZpZGVvQmxvYi5zaXplIC8gKDEwMjQgKiAxMDI0KSkudG9GaXhlZCgyKX0gTUJcclxuXHJcbiMjIENvbnRlbnQgQW5hbHlzaXNcclxuJHtmb3JtYXR0ZWRBbmFseXNlc31cclxuXHJcblRoaXMgYW5hbHlzaXMgaXMgYmFzZWQgb24gJHtmcmFtZUNvdW50fSBrZXkgZnJhbWVzIGV4dHJhY3RlZCBmcm9tIHRoZSB2aWRlby5gO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdWaWRlbyBwcm9jZXNzaW5nIGVycm9yOicsIGVycm9yKTtcclxuICAgIHRocm93IG5ldyBFcnJvcihgVmlkZW8gcHJvY2Vzc2luZyBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBQcm9jZXNzIHRleHQgd2l0aCBHUFQgbW9kZWwgdGhyb3VnaCBPcGVuUm91dGVyXHJcbmNvbnN0IHByb2Nlc3NUZXh0V2l0aEdQVCA9IGFzeW5jIChhcGlLZXksIHRleHQpID0+IHtcclxuICB0cnkge1xyXG4gICAgLy8gRGV0ZXJtaW5lIGlmIHdlJ3JlIHVzaW5nIE9wZW5Sb3V0ZXIgb3IgT3BlbkFJIGJhc2VkIG9uIHRoZSBBUEkga2V5IGZvcm1hdFxyXG4gICAgY29uc3QgaXNPcGVuUm91dGVyID0gYXBpS2V5LnN0YXJ0c1dpdGgoJ3NrLW9yLScpO1xyXG4gICAgY29uc3QgZW5kcG9pbnQgPSBpc09wZW5Sb3V0ZXJcclxuICAgICAgPyAnaHR0cHM6Ly9vcGVucm91dGVyLmFpL2FwaS92MS9jaGF0L2NvbXBsZXRpb25zJ1xyXG4gICAgICA6ICdodHRwczovL2FwaS5vcGVuYWkuY29tL3YxL2NoYXQvY29tcGxldGlvbnMnO1xyXG5cclxuICAgIC8vIFVzZSBhIG1vcmUgY29zdC1lZmZlY3RpdmUgbW9kZWwgaWYgZ29pbmcgdGhyb3VnaCBPcGVuUm91dGVyXHJcbiAgICBjb25zdCBtb2RlbCA9IGlzT3BlblJvdXRlciA/ICdvcGVuYWkvZ3B0LTMuNS10dXJibycgOiAnZ3B0LTMuNS10dXJibyc7XHJcblxyXG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7XHJcbiAgICAgIG1vZGVsOiBtb2RlbCxcclxuICAgICAgbWVzc2FnZXM6IFt7IHJvbGU6ICd1c2VyJywgY29udGVudDogdGV4dCB9XSxcclxuICAgICAgbWF4X3Rva2VuczogMTAwMFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoXHJcbiAgICAgIGVuZHBvaW50LFxyXG4gICAgICByZXF1ZXN0Qm9keSxcclxuICAgICAge1xyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHthcGlLZXl9YFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAocmVzcG9uc2UuZGF0YSAmJiByZXNwb25zZS5kYXRhLmNob2ljZXMgJiYgcmVzcG9uc2UuZGF0YS5jaG9pY2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuY2hvaWNlc1swXS5tZXNzYWdlLmNvbnRlbnQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIEFQSSByZXNwb25zZSBmb3JtYXQ6JywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHByb2Nlc3MgdGV4dCB3aXRoIEFJIG1vZGVsJyk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1RleHQgcHJvY2Vzc2luZyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRleHQgcHJvY2Vzc2luZyBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgeyBwcm9jZXNzSW1hZ2UsIHByb2Nlc3NBdWRpbywgcHJvY2Vzc1ZpZGVvLCBwcm9jZXNzVGV4dCB9O1xyXG4iXSwibmFtZXMiOlsiYXhpb3MiLCJpbnNlcnREYXRhIiwicmVhZEZpbGVBc0Jhc2U2NCIsImZpbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZXN1bHQiLCJvbmVycm9yIiwiZXJyb3IiLCJyZWFkQXNEYXRhVVJMIiwicHJvY2Vzc0ltYWdlIiwiX3JlZiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwiYmFzZTY0RGF0YSIsInJlc3BvbnNlIiwicHJvY2Vzc2VkRGF0YSIsImVycm9yRGF0YSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJhYnJ1cHQiLCJ0eXBlIiwic3RhcnRzV2l0aCIsIkVycm9yIiwiY29uY2F0Iiwic2VudCIsImVuc3VyZVZhbGlkSW1hZ2VEYXRhIiwibmFtZSIsImZldGNoQUlQcm9jZXNzaW5nIiwib3JpZ2luYWxOYW1lIiwic2l6ZSIsIm1pbWVUeXBlIiwicHJvY2Vzc2luZ1Jlc3VsdCIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwidDAiLCJjb25zb2xlIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImFwcGx5IiwiYXJndW1lbnRzIiwiX3JlZjIiLCJfY2FsbGVlMiIsImZpbGVuYW1lIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwiaW1nIiwiSW1hZ2UiLCJsb2ciLCJ3aWR0aCIsImhlaWdodCIsInNyYyIsIl94MiIsIl94MyIsInByb2Nlc3NWaWRlbyIsIl9yZWYzIiwiX2NhbGxlZTMiLCJfY2FsbGVlMyQiLCJfY29udGV4dDMiLCJfeDQiLCJwcm9jZXNzQXVkaW8iLCJfcmVmNCIsIl9jYWxsZWU0IiwiX2NhbGxlZTQkIiwiX2NvbnRleHQ0IiwiX3g1IiwicHJvY2Vzc1RleHQiLCJfcmVmNSIsIl9jYWxsZWU1IiwidGV4dCIsIl9jYWxsZWU1JCIsIl9jb250ZXh0NSIsInRyaW0iLCJsZW5ndGgiLCJjb250ZW50IiwiX3g2IiwiX3JlZjYiLCJfY2FsbGVlNiIsIm1lZGlhVHlwZSIsIm9wZW5BSUFwaUtleSIsIm9wZW5Sb3V0ZXJBcGlLZXkiLCJfYXJnczYiLCJfY2FsbGVlNiQiLCJfY29udGV4dDYiLCJ1bmRlZmluZWQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfT1BFTkFJX0FQSV9LRVkiLCJPUEVOUk9VVEVSX0FQSV9LRVkiLCJwcm9jZXNzSW1hZ2VXaXRoR1BUNFZpc2lvbiIsInByb2Nlc3NBdWRpb1dpdGhXaGlzcGVyIiwicHJvY2Vzc1ZpZGVvV2l0aEZyYW1lRXh0cmFjdGlvbiIsInByb2Nlc3NUZXh0V2l0aEdQVCIsInQxIiwiX3g3IiwiX3g4IiwiX3JlZjciLCJfY2FsbGVlNyIsImFwaUtleSIsImltYWdlRGF0YSIsImlzT3BlblJvdXRlciIsIm1vZGVsIiwiZW5kcG9pbnQiLCJoZWFkZXJzIiwiYmFzZTY0SW1hZ2UiLCJpbWFnZVVybCIsImltZ0RldGFpbHMiLCJyZXF1ZXN0Qm9keSIsInN0YXR1cyIsIl9kYXRhJGVycm9yIiwiX2NhbGxlZTckIiwiX2NvbnRleHQ3Iiwic3Vic3RyaW5nIiwiZ2V0SW1hZ2VEZXRhaWxzIiwiZm9ybWF0IiwiaW5jbHVkZXMiLCJzcGxpdCIsIm1lc3NhZ2VzIiwicm9sZSIsImltYWdlX3VybCIsInVybCIsIm1heF90b2tlbnMiLCJ0ZW1wZXJhdHVyZSIsIm1ldGhvZCIsInRpbWVvdXQiLCJjaG9pY2VzIiwiZm9ybWF0SW1hZ2VBbmFseXNpcyIsIl94OSIsIl94MTAiLCJfeDExIiwiX3JlZjgiLCJfY2FsbGVlOCIsIl9jYWxsZWU4JCIsIl9jb250ZXh0OCIsIm1pbWVNYXRjaCIsIm1hdGNoIiwiYXNwZWN0UmF0aW8iLCJfeDEyIiwiaW1hZ2VEZXRhaWxzIiwidG9VcHBlckNhc2UiLCJ0b0ZpeGVkIiwiX3JlZjkiLCJfY2FsbGVlOSIsImF1ZGlvRGF0YSIsImF1ZGlvQmFzZTY0IiwiY29udGVudFR5cGUiLCJieXRlQ2hhcmFjdGVycyIsImJ5dGVBcnJheXMiLCJvZmZzZXQiLCJzbGljZSIsImJ5dGVOdW1iZXJzIiwiaSIsImJ5dGVBcnJheSIsImF1ZGlvQmxvYiIsImZvcm1EYXRhIiwidHJhbnNjcmlwdGlvbiIsImFuYWx5c2lzUmVzcG9uc2UiLCJfY2FsbGVlOSQiLCJfY29udGV4dDkiLCJlbmRzV2l0aCIsImF0b2IiLCJBcnJheSIsImNoYXJDb2RlQXQiLCJVaW50OEFycmF5IiwicHVzaCIsIkJsb2IiLCJGb3JtRGF0YSIsImFwcGVuZCIsIl94MTMiLCJfeDE0IiwiX3gxNSIsIl9yZWYxMCIsIl9jYWxsZWUxMCIsInZpZGVvRGF0YSIsInZpZGVvQmxvYiIsInZpZGVvVXJsIiwidmlkZW8iLCJmcmFtZUNvdW50IiwiZnJhbWVzIiwiY2FudmFzIiwiY3R4IiwiZnJhbWVEYXRhVXJsIiwiZnJhbWVBbmFseXNlcyIsIl9pIiwiZnJhbWUiLCJhbmFseXNpcyIsImZvcm1hdHRlZEFuYWx5c2VzIiwiX2NhbGxlZTEwJCIsIl9jb250ZXh0MTAiLCJmZXRjaCIsInRoZW4iLCJyZXMiLCJibG9iIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwibXV0ZWQiLCJwbGF5c0lubGluZSIsImNyb3NzT3JpZ2luIiwib25sb2FkZWRtZXRhZGF0YSIsImxvYWQiLCJkdXJhdGlvbiIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsIk1hdGgiLCJtaW4iLCJtYXgiLCJmbG9vciIsImdldENvbnRleHQiLCJjdXJyZW50VGltZSIsIm9uc2Vla2VkIiwiZHJhd0ltYWdlIiwidG9EYXRhVVJMIiwiZGF0YVVybCIsInJldm9rZU9iamVjdFVSTCIsIm1hcCIsImZhIiwiam9pbiIsInJvdW5kIiwiX3gxNiIsIl94MTciLCJfeDE4IiwiX3JlZjExIiwiX2NhbGxlZTExIiwiX2NhbGxlZTExJCIsIl9jb250ZXh0MTEiLCJwb3N0IiwiX3gxOSIsIl94MjAiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/services/multimediaProcessor.js\n"));

/***/ })

});