"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./src/services/multimediaProcessor.js":
/*!*********************************************!*\
  !*** ./src/services/multimediaProcessor.js ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processAudio: () => (/* binding */ processAudio),\n/* harmony export */   processImage: () => (/* binding */ processImage),\n/* harmony export */   processText: () => (/* binding */ processText),\n/* harmony export */   processVideo: () => (/* binding */ processVideo)\n/* harmony export */ });\n/* harmony import */ var C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator.js */ \"(pages-dir-browser)/./node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator/index.js */ \"(pages-dir-browser)/./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(pages-dir-browser)/./node_modules/axios/index.js\");\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./database */ \"(pages-dir-browser)/./src/services/database.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\n// This file will handle multimedia processing and AI integrations using web-compatible APIs\n\n\n\n// Function to read file data as base64\nvar readFileAsBase64 = function readFileAsBase64(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onload = function () {\n      return resolve(reader.result);\n    };\n    reader.onerror = function (error) {\n      return reject(error);\n    };\n    reader.readAsDataURL(file);\n  });\n};\n\n// Process image file with AI\nvar processImage = /*#__PURE__*/function () {\n  var _ref = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(file) {\n    var base64Data, response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          if (file) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", null);\n        case 3:\n          if (file.type.startsWith('image/')) {\n            _context.next = 5;\n            break;\n          }\n          throw new Error(\"File type \".concat(file.type, \" is not supported for image processing\"));\n        case 5:\n          _context.next = 7;\n          return readFileAsBase64(file);\n        case 7:\n          base64Data = _context.sent;\n          _context.next = 10;\n          return ensureValidImageData(base64Data, file.name);\n        case 10:\n          _context.next = 12;\n          return fetchAIProcessing('image', base64Data, file.name);\n        case 12:\n          response = _context.sent;\n          // Store the processed result\n          processedData = {\n            originalName: file.name,\n            type: 'image',\n            size: file.size,\n            mimeType: file.type,\n            processingResult: response,\n            timestamp: new Date().toISOString(),\n            data: base64Data\n          };\n          _context.next = 16;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('image', JSON.stringify(processedData));\n        case 16:\n          return _context.abrupt(\"return\", processedData);\n        case 19:\n          _context.prev = 19;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('Error processing image:', _context.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            originalName: file ? file.name : 'unknown',\n            type: 'image',\n            size: file ? file.size : 0,\n            mimeType: file ? file.type : 'unknown',\n            processingResult: \"Error: Unable to process image. \".concat(_context.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context.next = 25;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('image', JSON.stringify(errorData));\n        case 25:\n          return _context.abrupt(\"return\", errorData);\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 19]]);\n  }));\n  return function processImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// Helper function to validate image data before sending to API\nvar ensureValidImageData = /*#__PURE__*/function () {\n  var _ref2 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2(base64Data, filename) {\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n            // Create an image element to test loading\n            var img = new Image();\n            img.onload = function () {\n              // If image loads successfully it's valid\n              console.log(\"Image validated: \".concat(filename, \" (\").concat(img.width, \"x\").concat(img.height, \")\"));\n              resolve(true);\n            };\n            img.onerror = function () {\n              reject(new Error('Invalid image data or format'));\n            };\n\n            // Set source to test loading\n            img.src = base64Data;\n          }));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function ensureValidImageData(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n// Process video file with AI\nvar processVideo = /*#__PURE__*/function () {\n  var _ref3 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee3(file) {\n    var base64Data, response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          if (file) {\n            _context3.next = 3;\n            break;\n          }\n          return _context3.abrupt(\"return\", null);\n        case 3:\n          if (file.type.startsWith('video/')) {\n            _context3.next = 5;\n            break;\n          }\n          throw new Error(\"File type \".concat(file.type, \" is not supported for video processing\"));\n        case 5:\n          _context3.next = 7;\n          return readFileAsBase64(file);\n        case 7:\n          base64Data = _context3.sent;\n          _context3.next = 10;\n          return fetchAIProcessing('video', base64Data, file.name);\n        case 10:\n          response = _context3.sent;\n          // Store the processed result\n          processedData = {\n            originalName: file.name,\n            type: 'video',\n            size: file.size,\n            mimeType: file.type,\n            processingResult: response,\n            timestamp: new Date().toISOString(),\n            data: base64Data\n          };\n          _context3.next = 14;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('video', JSON.stringify(processedData));\n        case 14:\n          return _context3.abrupt(\"return\", processedData);\n        case 17:\n          _context3.prev = 17;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error('Error processing video:', _context3.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            originalName: file ? file.name : 'unknown',\n            type: 'video',\n            size: file ? file.size : 0,\n            mimeType: file ? file.type : 'unknown',\n            processingResult: \"Error: Unable to process video. \".concat(_context3.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context3.next = 23;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('video', JSON.stringify(errorData));\n        case 23:\n          return _context3.abrupt(\"return\", errorData);\n        case 24:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 17]]);\n  }));\n  return function processVideo(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n// Process audio with AI\nvar processAudio = /*#__PURE__*/function () {\n  var _ref4 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee4(file) {\n    var base64Data, response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          if (file) {\n            _context4.next = 3;\n            break;\n          }\n          return _context4.abrupt(\"return\", null);\n        case 3:\n          if (file.type.startsWith('audio/')) {\n            _context4.next = 5;\n            break;\n          }\n          throw new Error(\"File type \".concat(file.type, \" is not supported for audio processing\"));\n        case 5:\n          _context4.next = 7;\n          return readFileAsBase64(file);\n        case 7:\n          base64Data = _context4.sent;\n          _context4.next = 10;\n          return fetchAIProcessing('audio', base64Data, file.name);\n        case 10:\n          response = _context4.sent;\n          // Store the processed result\n          processedData = {\n            originalName: file.name,\n            type: 'audio',\n            size: file.size,\n            mimeType: file.type,\n            processingResult: response,\n            timestamp: new Date().toISOString(),\n            data: base64Data\n          };\n          _context4.next = 14;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('audio', JSON.stringify(processedData));\n        case 14:\n          return _context4.abrupt(\"return\", processedData);\n        case 17:\n          _context4.prev = 17;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error('Error processing audio:', _context4.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            originalName: file ? file.name : 'unknown',\n            type: 'audio',\n            size: file ? file.size : 0,\n            mimeType: file ? file.type : 'unknown',\n            processingResult: \"Error: Unable to process audio. \".concat(_context4.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context4.next = 23;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('audio', JSON.stringify(errorData));\n        case 23:\n          return _context4.abrupt(\"return\", errorData);\n        case 24:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[0, 17]]);\n  }));\n  return function processAudio(_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n// Process text with AI\nvar processText = /*#__PURE__*/function () {\n  var _ref5 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee5(text) {\n    var response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          if (!(!text || typeof text !== 'string' || text.trim().length === 0)) {\n            _context5.next = 3;\n            break;\n          }\n          throw new Error('Invalid or empty text input');\n        case 3:\n          _context5.next = 5;\n          return fetchAIProcessing('text', text);\n        case 5:\n          response = _context5.sent;\n          // Store the processed result\n          processedData = {\n            type: 'text',\n            content: text,\n            processingResult: response,\n            timestamp: new Date().toISOString()\n          };\n          _context5.next = 9;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('text', JSON.stringify(processedData));\n        case 9:\n          return _context5.abrupt(\"return\", processedData);\n        case 12:\n          _context5.prev = 12;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error('Error processing text:', _context5.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            type: 'text',\n            content: text || '',\n            processingResult: \"Error: Unable to process text. \".concat(_context5.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context5.next = 18;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('text', JSON.stringify(errorData));\n        case 18:\n          return _context5.abrupt(\"return\", errorData);\n        case 19:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[0, 12]]);\n  }));\n  return function processText(_x6) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\n// Function to call relevant API for processing based on media type\nvar fetchAIProcessing = /*#__PURE__*/function () {\n  var _ref6 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee6(mediaType, content) {\n    var filename,\n      openAIApiKey,\n      openRouterApiKey,\n      _args6 = arguments;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          filename = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : '';\n          // Get API keys from environment variables\n          openAIApiKey = \"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\";\n          openRouterApiKey = process.env.OPENROUTER_API_KEY; // Ensure we have an API key\n          if (!(!openAIApiKey && !openRouterApiKey)) {\n            _context6.next = 6;\n            break;\n          }\n          console.error('API key not found in environment variables');\n          throw new Error('API key is required for media processing');\n        case 6:\n          _context6.prev = 6;\n          _context6.t0 = mediaType;\n          _context6.next = _context6.t0 === 'image' ? 10 : _context6.t0 === 'audio' ? 13 : _context6.t0 === 'video' ? 16 : _context6.t0 === 'text' ? 19 : 22;\n          break;\n        case 10:\n          _context6.next = 12;\n          return processImageWithGPT4Vision(openAIApiKey, content, filename);\n        case 12:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 13:\n          _context6.next = 15;\n          return processAudioWithWhisper(openAIApiKey, content, filename);\n        case 15:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 16:\n          _context6.next = 18;\n          return processVideoWithFrameExtraction(openAIApiKey, content, filename);\n        case 18:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 19:\n          _context6.next = 21;\n          return processTextWithGPT(openRouterApiKey || openAIApiKey, content);\n        case 21:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 22:\n          throw new Error(\"Unsupported media type: \".concat(mediaType));\n        case 23:\n          _context6.next = 29;\n          break;\n        case 25:\n          _context6.prev = 25;\n          _context6.t1 = _context6[\"catch\"](6);\n          console.error(\"Error in AI processing for \".concat(mediaType, \":\"), _context6.t1);\n          throw _context6.t1;\n        case 29:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[6, 25]]);\n  }));\n  return function fetchAIProcessing(_x7, _x8) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\n// Process image with OpenAI Vision models\nvar processImageWithGPT4Vision = /*#__PURE__*/function () {\n  var _ref7 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee7(apiKey, imageData, filename) {\n    var isOpenRouter, model, endpoint, headers, base64Image, imgDetails, requestBody, response, status, data, _data$error;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          console.log('Processing image with OpenAI Vision models...'); // Check if we're using OpenRouter or OpenAI based on the API key format\n          // OpenRouter keys start with sk-or-, OpenAI keys start with sk- (including sk-proj-)\n          isOpenRouter = apiKey.startsWith('sk-or-');\n          headers = {\n            'Content-Type': 'application/json',\n            'Authorization': \"Bearer \".concat(apiKey)\n          }; // Log API key format for debugging (without revealing the full key)\n          console.log(\"API key format: \".concat(apiKey.substring(0, 7), \"...\"));\n\n          // Select appropriate model and endpoint based on API key type\n          if (isOpenRouter) {\n            model = 'openai/gpt-4-vision-preview'; // OpenRouter format for Vision model\n            endpoint = 'https://openrouter.ai/api/v1/chat/completions';\n            headers['HTTP-Referer'] = 'https://precek.app'; // Required by OpenRouter\n            console.log('Using OpenRouter for image processing');\n          } else {\n            // Using OpenAI directly\n            model = 'gpt-4-vision-preview'; // Latest vision model\n            endpoint = 'https://api.openai.com/v1/chat/completions';\n            console.log('Using OpenAI directly for image processing');\n          }\n\n          // Process the image data - make sure we have a proper format\n          base64Image = imageData;\n          if (base64Image.includes(',')) {\n            // Extract the base64 part after the comma if it's a data URL\n            base64Image = base64Image.split(',')[1];\n          }\n\n          // Get image details\n          _context7.next = 10;\n          return getImageDetails(imageData);\n        case 10:\n          imgDetails = _context7.sent;\n          console.log(\"Image validated: \".concat(filename, \" (\").concat(imgDetails.width, \"x\").concat(imgDetails.height, \", \").concat(imgDetails.format, \")\"));\n\n          // Create the API request body\n          requestBody = {\n            model: model,\n            messages: [{\n              role: 'user',\n              content: [{\n                type: 'text',\n                text: \"Please analyze this image thoroughly and provide:\\n1. Description of main subjects and elements\\n2. Colors, lighting, and composition analysis\\n3. Any text visible in the image (transcribe exactly)\\n4. Context and potential meaning/purpose of the image\\n5. Any notable objects, landmarks, or people\\n6. Image quality and technical assessment\\n\\nFilename: \".concat(filename || 'uploaded image')\n              }, {\n                type: 'image_url',\n                image_url: {\n                  url: \"data:\".concat(imgDetails.mimeType, \";base64,\").concat(base64Image)\n                }\n              }]\n            }],\n            max_tokens: 1000,\n            temperature: 0.7\n          }; // Make the API request\n          console.log(\"Sending request to \".concat(isOpenRouter ? 'OpenRouter' : 'OpenAI', \" API...\"));\n          _context7.next = 16;\n          return (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            method: 'post',\n            url: endpoint,\n            headers: headers,\n            data: requestBody,\n            timeout: 60000 // 60 second timeout for image processing\n          });\n        case 16:\n          response = _context7.sent;\n          if (!(response.data && response.data.choices && response.data.choices.length > 0)) {\n            _context7.next = 22;\n            break;\n          }\n          console.log('Image successfully processed by vision model');\n          return _context7.abrupt(\"return\", formatImageAnalysis(response.data.choices[0].message.content, filename, imgDetails));\n        case 22:\n          console.error('Unexpected API response format:', response.data);\n          throw new Error('Failed to process image with AI model: invalid response format');\n        case 24:\n          _context7.next = 47;\n          break;\n        case 26:\n          _context7.prev = 26;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error('Image processing error:', _context7.t0);\n          // Check for specific API error types\n          if (!_context7.t0.response) {\n            _context7.next = 46;\n            break;\n          }\n          status = _context7.t0.response.status;\n          data = _context7.t0.response.data;\n          if (!(status === 400)) {\n            _context7.next = 36;\n            break;\n          }\n          throw new Error(\"Image processing failed: Bad request - \".concat(((_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) || 'Invalid request parameters'));\n        case 36:\n          if (!(status === 401)) {\n            _context7.next = 40;\n            break;\n          }\n          throw new Error('Image processing failed: Invalid API key or unauthorized access');\n        case 40:\n          if (!(status === 429)) {\n            _context7.next = 44;\n            break;\n          }\n          throw new Error('Image processing failed: Rate limit exceeded or insufficient quota');\n        case 44:\n          if (!(status === 500)) {\n            _context7.next = 46;\n            break;\n          }\n          throw new Error('Image processing failed: OpenAI service error');\n        case 46:\n          throw new Error(\"Image processing failed: \".concat(_context7.t0.message));\n        case 47:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[0, 26]]);\n  }));\n  return function processImageWithGPT4Vision(_x9, _x10, _x11) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\n// Helper function to get image details\nvar getImageDetails = /*#__PURE__*/function () {\n  var _ref8 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee8(imageData) {\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          return _context8.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var img = new Image();\n            img.onload = function () {\n              // Get image format from data URL\n              var format = 'jpeg'; // Default\n              var mimeType = 'image/jpeg'; // Default\n\n              if (imageData.includes('data:')) {\n                var mimeMatch = imageData.match(/data:([^;]+);/);\n                if (mimeMatch && mimeMatch[1]) {\n                  mimeType = mimeMatch[1];\n                  format = mimeMatch[1].split('/')[1];\n                }\n              }\n              resolve({\n                width: img.width,\n                height: img.height,\n                format: format,\n                mimeType: mimeType,\n                aspectRatio: img.width / img.height\n              });\n            };\n            img.onerror = function () {\n              reject(new Error('Failed to load image for analysis'));\n            };\n            img.src = imageData;\n          }));\n        case 1:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return function getImageDetails(_x12) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\n// Format the image analysis in a structured way\nvar formatImageAnalysis = function formatImageAnalysis(content, filename, imageDetails) {\n  return \"# Image Analysis: \".concat(filename || 'Uploaded Image', \"\\n\\n## Technical Details\\n- Dimensions: \").concat(imageDetails.width, \"x\").concat(imageDetails.height, \" pixels\\n- Format: \").concat(imageDetails.format.toUpperCase(), \"\\n- Aspect Ratio: \").concat(imageDetails.aspectRatio.toFixed(2), \"\\n\\n## Analysis\\n\").concat(content, \"\\n\\n---\\n*Analyzed with OpenAI Vision Model*\");\n};\n\n// Process audio with Whisper API according to OpenAI docs\n// https://platform.openai.com/docs/guides/speech-to-text/quickstart\nvar processAudioWithWhisper = /*#__PURE__*/function () {\n  var _ref9 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee9(apiKey, audioData, filename) {\n    var audioBase64, contentType, byteCharacters, byteArrays, offset, slice, byteNumbers, i, byteArray, audioBlob, formData, response, transcription, analysisResponse;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          console.log('Processing audio with Whisper API...');\n\n          // Convert base64 audio data to a Blob\n          audioBase64 = audioData;\n          if (audioBase64.includes(',')) {\n            audioBase64 = audioBase64.split(',')[1];\n          }\n\n          // Determine the content type from the data URL or filename\n          contentType = audioData.includes('data:') ? audioData.split(';')[0].split(':')[1] : filename.endsWith('.mp3') ? 'audio/mp3' : 'audio/mpeg'; // Convert base64 to a Blob (important for FormData)\n          byteCharacters = atob(audioBase64);\n          byteArrays = [];\n          for (offset = 0; offset < byteCharacters.length; offset += 1024) {\n            slice = byteCharacters.slice(offset, offset + 1024);\n            byteNumbers = new Array(slice.length);\n            for (i = 0; i < slice.length; i++) {\n              byteNumbers[i] = slice.charCodeAt(i);\n            }\n            byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n          }\n          audioBlob = new Blob(byteArrays, {\n            type: contentType\n          });\n          console.log(\"Created audio blob of type \".concat(contentType, \", size: \").concat(audioBlob.size, \" bytes\"));\n\n          // Create a form data object as required by the Whisper API\n          formData = new FormData();\n          formData.append('file', audioBlob, filename || 'audio.mp3');\n          formData.append('model', 'whisper-1');\n          formData.append('response_format', 'json'); // Get structured JSON response\n          formData.append('language', 'en'); // Set to English for better accuracy\n\n          // Call the OpenAI Whisper API\n          console.log('Sending request to Whisper API...');\n          _context9.next = 18;\n          return (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            method: 'post',\n            url: 'https://api.openai.com/v1/audio/transcriptions',\n            headers: {\n              'Authorization': \"Bearer \".concat(apiKey)\n              // Content-Type is set automatically by axios with FormData\n            },\n\n            data: formData\n          });\n        case 18:\n          response = _context9.sent;\n          if (!(response.data && response.data.text)) {\n            _context9.next = 33;\n            break;\n          }\n          transcription = response.data.text;\n          console.log('Successfully transcribed audio');\n\n          // Now analyze the transcription with GPT\n          console.log('Analyzing transcription content...');\n          _context9.next = 25;\n          return (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            method: 'post',\n            url: 'https://api.openai.com/v1/chat/completions',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"Bearer \".concat(apiKey)\n            },\n            data: {\n              model: 'gpt-3.5-turbo',\n              messages: [{\n                role: 'user',\n                content: \"Analyze this audio transcription and provide a summary of key points, topics, and any notable patterns or insights:\\n\\n\".concat(transcription)\n              }],\n              max_tokens: 500\n            }\n          });\n        case 25:\n          analysisResponse = _context9.sent;\n          if (!(analysisResponse.data && analysisResponse.data.choices && analysisResponse.data.choices.length > 0 && analysisResponse.data.choices[0].message)) {\n            _context9.next = 30;\n            break;\n          }\n          return _context9.abrupt(\"return\", \"## Audio Transcription\\n\\n\".concat(transcription, \"\\n\\n## Analysis\\n\\n\").concat(analysisResponse.data.choices[0].message.content));\n        case 30:\n          return _context9.abrupt(\"return\", \"## Audio Transcription\\n\\n\".concat(transcription, \"\\n\\n(Analysis unavailable)\"));\n        case 31:\n          _context9.next = 35;\n          break;\n        case 33:\n          console.error('Unexpected API response format:', response.data);\n          throw new Error('Failed to transcribe audio: unexpected response format');\n        case 35:\n          _context9.next = 42;\n          break;\n        case 37:\n          _context9.prev = 37;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error('Audio processing error:', _context9.t0);\n          if (_context9.t0.response) {\n            console.error('API error response:', _context9.t0.response.data);\n          }\n          throw new Error(\"Audio processing failed: \".concat(_context9.t0.message));\n        case 42:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9, null, [[0, 37]]);\n  }));\n  return function processAudioWithWhisper(_x13, _x14, _x15) {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\n// Process video by extracting multiple frames for analysis\nvar processVideoWithFrameExtraction = /*#__PURE__*/function () {\n  var _ref10 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee10(apiKey, videoData, filename) {\n    var videoBlob, videoUrl, video, frameCount, frames, canvas, ctx, i, timestamp, frameDataUrl, frameAnalyses, _i, frame, analysis, formattedAnalyses;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          console.log('Processing video with frame extraction...');\n\n          // Convert data URL to Blob for video element\n          _context10.next = 4;\n          return fetch(videoData).then(function (res) {\n            return res.blob();\n          });\n        case 4:\n          videoBlob = _context10.sent;\n          videoUrl = URL.createObjectURL(videoBlob); // Create a video element to extract frames\n          video = document.createElement('video');\n          video.muted = true; // Required for autoplay in some browsers\n          video.playsInline = true;\n          video.crossOrigin = 'anonymous';\n          video.src = videoUrl;\n\n          // Wait for metadata to load\n          _context10.next = 13;\n          return new Promise(function (resolve, reject) {\n            video.onloadedmetadata = resolve;\n            video.onerror = reject;\n            video.load();\n          });\n        case 13:\n          console.log(\"Video loaded: Duration \".concat(video.duration, \"s, Dimensions: \").concat(video.videoWidth, \"x\").concat(video.videoHeight));\n\n          // Extract multiple frames from different points in the video\n          frameCount = Math.min(3, Math.max(1, Math.floor(video.duration / 5)));\n          frames = []; // Create canvas for frame extraction\n          canvas = document.createElement('canvas');\n          canvas.width = video.videoWidth;\n          canvas.height = video.videoHeight;\n          ctx = canvas.getContext('2d'); // Extract frames at different timestamps\n          i = 0;\n        case 21:\n          if (!(i < frameCount)) {\n            _context10.next = 33;\n            break;\n          }\n          timestamp = i * (video.duration / (frameCount + 1)); // Seek to timestamp\n          video.currentTime = timestamp;\n\n          // Wait for seek to complete\n          _context10.next = 26;\n          return new Promise(function (resolve) {\n            video.onseeked = resolve;\n          });\n        case 26:\n          // Draw frame to canvas\n          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n          // Get frame as data URL\n          frameDataUrl = canvas.toDataURL('image/jpeg', 0.8);\n          frames.push({\n            timestamp: timestamp,\n            dataUrl: frameDataUrl\n          });\n          console.log(\"Extracted frame at \".concat(timestamp.toFixed(2), \"s\"));\n        case 30:\n          i++;\n          _context10.next = 21;\n          break;\n        case 33:\n          // Clean up video resources\n          URL.revokeObjectURL(videoUrl);\n\n          // Analyze frames with Vision API\n          console.log('Analyzing video frames with Vision API...');\n          frameAnalyses = [];\n          _i = 0;\n        case 37:\n          if (!(_i < frames.length)) {\n            _context10.next = 46;\n            break;\n          }\n          frame = frames[_i];\n          _context10.next = 41;\n          return processImageWithGPT4Vision(apiKey, frame.dataUrl, \"Frame at \".concat(frame.timestamp.toFixed(2), \"s from \").concat(filename));\n        case 41:\n          analysis = _context10.sent;\n          frameAnalyses.push({\n            timestamp: frame.timestamp,\n            analysis: analysis\n          });\n        case 43:\n          _i++;\n          _context10.next = 37;\n          break;\n        case 46:\n          // Combine all frame analyses into a comprehensive video analysis\n          formattedAnalyses = frameAnalyses.map(function (fa) {\n            return \"### Frame at \".concat(fa.timestamp.toFixed(2), \"s:\\n\").concat(fa.analysis);\n          }).join('\\n\\n');\n          return _context10.abrupt(\"return\", \"# Video Analysis for: \".concat(filename, \"\\n\\n## Technical Details\\n- Duration: \").concat(Math.round(video.duration), \" seconds\\n- Dimensions: \").concat(video.videoWidth, \"x\").concat(video.videoHeight, \"\\n- Format: \").concat(videoBlob.type, \"\\n- File Size: \").concat((videoBlob.size / (1024 * 1024)).toFixed(2), \" MB\\n\\n## Content Analysis\\n\").concat(formattedAnalyses, \"\\n\\nThis analysis is based on \").concat(frameCount, \" key frames extracted from the video.\"));\n        case 50:\n          _context10.prev = 50;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error('Video processing error:', _context10.t0);\n          throw new Error(\"Video processing failed: \".concat(_context10.t0.message));\n        case 54:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10, null, [[0, 50]]);\n  }));\n  return function processVideoWithFrameExtraction(_x16, _x17, _x18) {\n    return _ref10.apply(this, arguments);\n  };\n}();\n\n// Process text with GPT model through OpenRouter\nvar processTextWithGPT = /*#__PURE__*/function () {\n  var _ref11 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee11(apiKey, text) {\n    var isOpenRouter, endpoint, model, requestBody, response;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          // Determine if we're using OpenRouter or OpenAI based on the API key format\n          isOpenRouter = apiKey.startsWith('sk-or-');\n          endpoint = isOpenRouter ? 'https://openrouter.ai/api/v1/chat/completions' : 'https://api.openai.com/v1/chat/completions'; // Use a more cost-effective model if going through OpenRouter\n          model = isOpenRouter ? 'openai/gpt-3.5-turbo' : 'gpt-3.5-turbo';\n          requestBody = {\n            model: model,\n            messages: [{\n              role: 'user',\n              content: text\n            }],\n            max_tokens: 1000\n          };\n          _context11.next = 7;\n          return axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].post(endpoint, requestBody, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"Bearer \".concat(apiKey)\n            }\n          });\n        case 7:\n          response = _context11.sent;\n          if (!(response.data && response.data.choices && response.data.choices.length > 0)) {\n            _context11.next = 12;\n            break;\n          }\n          return _context11.abrupt(\"return\", response.data.choices[0].message.content);\n        case 12:\n          console.error('Unexpected API response format:', response.data);\n          throw new Error('Failed to process text with AI model');\n        case 14:\n          _context11.next = 20;\n          break;\n        case 16:\n          _context11.prev = 16;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error('Text processing error:', _context11.t0);\n          throw new Error(\"Text processing failed: \".concat(_context11.t0.message));\n        case 20:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11, null, [[0, 16]]);\n  }));\n  return function processTextWithGPT(_x19, _x20) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9tdWx0aW1lZGlhUHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQzBCO0FBQ2M7O0FBRXhDO0FBQ0EsSUFBTUUsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFnQkEsQ0FBSUMsSUFBSSxFQUFLO0VBQ2pDLE9BQU8sSUFBSUMsT0FBTyxDQUFDLFVBQUNDLE9BQU8sRUFBRUMsTUFBTSxFQUFLO0lBQ3RDLElBQU1DLE1BQU0sR0FBRyxJQUFJQyxVQUFVLENBQUMsQ0FBQztJQUMvQkQsTUFBTSxDQUFDRSxNQUFNLEdBQUc7TUFBQSxPQUFNSixPQUFPLENBQUNFLE1BQU0sQ0FBQ0csTUFBTSxDQUFDO0lBQUE7SUFDNUNILE1BQU0sQ0FBQ0ksT0FBTyxHQUFHLFVBQUNDLEtBQUs7TUFBQSxPQUFLTixNQUFNLENBQUNNLEtBQUssQ0FBQztJQUFBO0lBQ3pDTCxNQUFNLENBQUNNLGFBQWEsQ0FBQ1YsSUFBSSxDQUFDO0VBQzVCLENBQUMsQ0FBQztBQUNKLENBQUM7O0FBRUQ7QUFDQSxJQUFNVyxZQUFZO0VBQUEsSUFBQUMsSUFBQSxHQUFBQyxxS0FBQSxlQUFBQyx1SUFBQSxDQUFHLFNBQUFFLFFBQU9oQixJQUFJO0lBQUEsSUFBQWlCLFVBQUEsRUFBQUMsUUFBQSxFQUFBQyxhQUFBLEVBQUFDLFNBQUE7SUFBQSxPQUFBTix1SUFBQSxVQUFBUSxTQUFBQyxRQUFBO01BQUEsa0JBQUFBLFFBQUEsQ0FBQUMsSUFBQSxHQUFBRCxRQUFBLENBQUFFLElBQUE7UUFBQTtVQUFBRixRQUFBLENBQUFDLElBQUE7VUFBQSxJQUV2QnhCLElBQUk7WUFBQXVCLFFBQUEsQ0FBQUUsSUFBQTtZQUFBO1VBQUE7VUFBQSxPQUFBRixRQUFBLENBQUFHLE1BQUEsV0FBUyxJQUFJO1FBQUE7VUFBQSxJQUdqQjFCLElBQUksQ0FBQzJCLElBQUksQ0FBQ0MsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUFBTCxR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SUFBQTtNQUFBO0lBQUEsR0FBQTBMLFNBQUE7RUFBQSxDQUU5RDtFQUFBLGdCQXRDS25JLGtCQUFrQkEsQ0FBQXVJLElBQUEsRUFBQUMsSUFBQTtJQUFBLE9BQUFOLE1BQUEsQ0FBQXZMLEtBQUEsT0FBQUMsU0FBQTtFQUFBO0FBQUEsR0FzQ3ZCO0FBRWdFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFydHVyXFxEb2N1bWVudHNcXENsaW5lXFxwcmVjZWtcXHByZWNla1xcc3JjXFxzZXJ2aWNlc1xcbXVsdGltZWRpYVByb2Nlc3Nvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgd2lsbCBoYW5kbGUgbXVsdGltZWRpYSBwcm9jZXNzaW5nIGFuZCBBSSBpbnRlZ3JhdGlvbnMgdXNpbmcgd2ViLWNvbXBhdGlibGUgQVBJc1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgeyBpbnNlcnREYXRhIH0gZnJvbSAnLi9kYXRhYmFzZSc7XHJcblxyXG4vLyBGdW5jdGlvbiB0byByZWFkIGZpbGUgZGF0YSBhcyBiYXNlNjRcclxuY29uc3QgcmVhZEZpbGVBc0Jhc2U2NCA9IChmaWxlKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICByZWFkZXIub25sb2FkID0gKCkgPT4gcmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcclxuICAgIHJlYWRlci5vbmVycm9yID0gKGVycm9yKSA9PiByZWplY3QoZXJyb3IpO1xyXG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vLyBQcm9jZXNzIGltYWdlIGZpbGUgd2l0aCBBSVxyXG5jb25zdCBwcm9jZXNzSW1hZ2UgPSBhc3luYyAoZmlsZSkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAoIWZpbGUpIHJldHVybiBudWxsO1xyXG5cclxuICAgIC8vIFZhbGlkYXRlIGZpbGUgdHlwZVxyXG4gICAgaWYgKCFmaWxlLnR5cGUuc3RhcnRzV2l0aCgnaW1hZ2UvJykpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWxlIHR5cGUgJHtmaWxlLnR5cGV9IGlzIG5vdCBzdXBwb3J0ZWQgZm9yIGltYWdlIHByb2Nlc3NpbmdgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiYXNlNjREYXRhID0gYXdhaXQgcmVhZEZpbGVBc0Jhc2U2NChmaWxlKTtcclxuXHJcbiAgICAvLyBCYXNpYyBpbWFnZSBwcmVwcm9jZXNzaW5nXHJcbiAgICBhd2FpdCBlbnN1cmVWYWxpZEltYWdlRGF0YShiYXNlNjREYXRhLCBmaWxlLm5hbWUpO1xyXG5cclxuICAgIC8vIENhbGwgQVBJIGZvciBpbWFnZSBhbmFseXNpc1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaEFJUHJvY2Vzc2luZygnaW1hZ2UnLCBiYXNlNjREYXRhLCBmaWxlLm5hbWUpO1xyXG5cclxuICAgIC8vIFN0b3JlIHRoZSBwcm9jZXNzZWQgcmVzdWx0XHJcbiAgICBjb25zdCBwcm9jZXNzZWREYXRhID0ge1xyXG4gICAgICBvcmlnaW5hbE5hbWU6IGZpbGUubmFtZSxcclxuICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgc2l6ZTogZmlsZS5zaXplLFxyXG4gICAgICBtaW1lVHlwZTogZmlsZS50eXBlLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiByZXNwb25zZSxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGRhdGE6IGJhc2U2NERhdGFcclxuICAgIH07XHJcblxyXG4gICAgYXdhaXQgaW5zZXJ0RGF0YSgnaW1hZ2UnLCBKU09OLnN0cmluZ2lmeShwcm9jZXNzZWREYXRhKSk7XHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkRGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyBpbWFnZTonLCBlcnJvcik7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZmFsbGJhY2sgcHJvY2Vzc2VkIHJlc3VsdCB3aXRoIGVycm9yIGluZm9ybWF0aW9uXHJcbiAgICBjb25zdCBlcnJvckRhdGEgPSB7XHJcbiAgICAgIG9yaWdpbmFsTmFtZTogZmlsZSA/IGZpbGUubmFtZSA6ICd1bmtub3duJyxcclxuICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgc2l6ZTogZmlsZSA/IGZpbGUuc2l6ZSA6IDAsXHJcbiAgICAgIG1pbWVUeXBlOiBmaWxlID8gZmlsZS50eXBlIDogJ3Vua25vd24nLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiBgRXJyb3I6IFVuYWJsZSB0byBwcm9jZXNzIGltYWdlLiAke2Vycm9yLm1lc3NhZ2V9YCxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGVycm9yOiB0cnVlXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFN0aWxsIHN0b3JlIHRoZSBlcnJvciByZXN1bHQgc28gdXNlciBjYW4gc2VlIGl0IGluIHZpc3VhbGl6YXRpb25zXHJcbiAgICBhd2FpdCBpbnNlcnREYXRhKCdpbWFnZScsIEpTT04uc3RyaW5naWZ5KGVycm9yRGF0YSkpO1xyXG5cclxuICAgIC8vIFdlIHJldHVybiB0aGUgZXJyb3IgZGF0YSByYXRoZXIgdGhhbiB0aHJvd2luZyBzbyBVSSBjYW4gaGFuZGxlIGl0IGdyYWNlZnVsbHlcclxuICAgIHJldHVybiBlcnJvckRhdGE7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHZhbGlkYXRlIGltYWdlIGRhdGEgYmVmb3JlIHNlbmRpbmcgdG8gQVBJXHJcbmNvbnN0IGVuc3VyZVZhbGlkSW1hZ2VEYXRhID0gYXN5bmMgKGJhc2U2NERhdGEsIGZpbGVuYW1lKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIC8vIENyZWF0ZSBhbiBpbWFnZSBlbGVtZW50IHRvIHRlc3QgbG9hZGluZ1xyXG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgLy8gSWYgaW1hZ2UgbG9hZHMgc3VjY2Vzc2Z1bGx5IGl0J3MgdmFsaWRcclxuICAgICAgY29uc29sZS5sb2coYEltYWdlIHZhbGlkYXRlZDogJHtmaWxlbmFtZX0gKCR7aW1nLndpZHRofXgke2ltZy5oZWlnaHR9KWApO1xyXG4gICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpbWcub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgcmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBpbWFnZSBkYXRhIG9yIGZvcm1hdCcpKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gU2V0IHNvdXJjZSB0byB0ZXN0IGxvYWRpbmdcclxuICAgIGltZy5zcmMgPSBiYXNlNjREYXRhO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLy8gUHJvY2VzcyB2aWRlbyBmaWxlIHdpdGggQUlcclxuY29uc3QgcHJvY2Vzc1ZpZGVvID0gYXN5bmMgKGZpbGUpID0+IHtcclxuICB0cnkge1xyXG4gICAgaWYgKCFmaWxlKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAvLyBWYWxpZGF0ZSBmaWxlIHR5cGVcclxuICAgIGlmICghZmlsZS50eXBlLnN0YXJ0c1dpdGgoJ3ZpZGVvLycpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmlsZSB0eXBlICR7ZmlsZS50eXBlfSBpcyBub3Qgc3VwcG9ydGVkIGZvciB2aWRlbyBwcm9jZXNzaW5nYCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmFzZTY0RGF0YSA9IGF3YWl0IHJlYWRGaWxlQXNCYXNlNjQoZmlsZSk7XHJcblxyXG4gICAgLy8gQ2FsbCBBSSBzZXJ2aWNlIGZvciB2aWRlbyBhbmFseXNpc1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaEFJUHJvY2Vzc2luZygndmlkZW8nLCBiYXNlNjREYXRhLCBmaWxlLm5hbWUpO1xyXG5cclxuICAgIC8vIFN0b3JlIHRoZSBwcm9jZXNzZWQgcmVzdWx0XHJcbiAgICBjb25zdCBwcm9jZXNzZWREYXRhID0ge1xyXG4gICAgICBvcmlnaW5hbE5hbWU6IGZpbGUubmFtZSxcclxuICAgICAgdHlwZTogJ3ZpZGVvJyxcclxuICAgICAgc2l6ZTogZmlsZS5zaXplLFxyXG4gICAgICBtaW1lVHlwZTogZmlsZS50eXBlLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiByZXNwb25zZSxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGRhdGE6IGJhc2U2NERhdGFcclxuICAgIH07XHJcblxyXG4gICAgYXdhaXQgaW5zZXJ0RGF0YSgndmlkZW8nLCBKU09OLnN0cmluZ2lmeShwcm9jZXNzZWREYXRhKSk7XHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkRGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyB2aWRlbzonLCBlcnJvcik7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZmFsbGJhY2sgcHJvY2Vzc2VkIHJlc3VsdCB3aXRoIGVycm9yIGluZm9ybWF0aW9uXHJcbiAgICBjb25zdCBlcnJvckRhdGEgPSB7XHJcbiAgICAgIG9yaWdpbmFsTmFtZTogZmlsZSA/IGZpbGUubmFtZSA6ICd1bmtub3duJyxcclxuICAgICAgdHlwZTogJ3ZpZGVvJyxcclxuICAgICAgc2l6ZTogZmlsZSA/IGZpbGUuc2l6ZSA6IDAsXHJcbiAgICAgIG1pbWVUeXBlOiBmaWxlID8gZmlsZS50eXBlIDogJ3Vua25vd24nLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiBgRXJyb3I6IFVuYWJsZSB0byBwcm9jZXNzIHZpZGVvLiAke2Vycm9yLm1lc3NhZ2V9YCxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGVycm9yOiB0cnVlXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFN0aWxsIHN0b3JlIHRoZSBlcnJvciByZXN1bHQgc28gdXNlciBjYW4gc2VlIGl0IGluIHZpc3VhbGl6YXRpb25zXHJcbiAgICBhd2FpdCBpbnNlcnREYXRhKCd2aWRlbycsIEpTT04uc3RyaW5naWZ5KGVycm9yRGF0YSkpO1xyXG5cclxuICAgIC8vIFJldHVybiB0aGUgZXJyb3IgZGF0YSByYXRoZXIgdGhhbiB0aHJvd2luZ1xyXG4gICAgcmV0dXJuIGVycm9yRGF0YTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBQcm9jZXNzIGF1ZGlvIHdpdGggQUlcclxuY29uc3QgcHJvY2Vzc0F1ZGlvID0gYXN5bmMgKGZpbGUpID0+IHtcclxuICB0cnkge1xyXG4gICAgaWYgKCFmaWxlKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAvLyBWYWxpZGF0ZSBmaWxlIHR5cGVcclxuICAgIGlmICghZmlsZS50eXBlLnN0YXJ0c1dpdGgoJ2F1ZGlvLycpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmlsZSB0eXBlICR7ZmlsZS50eXBlfSBpcyBub3Qgc3VwcG9ydGVkIGZvciBhdWRpbyBwcm9jZXNzaW5nYCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmFzZTY0RGF0YSA9IGF3YWl0IHJlYWRGaWxlQXNCYXNlNjQoZmlsZSk7XHJcblxyXG4gICAgLy8gQ2FsbCBBSSBzZXJ2aWNlIGZvciBhdWRpbyBhbmFseXNpc1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaEFJUHJvY2Vzc2luZygnYXVkaW8nLCBiYXNlNjREYXRhLCBmaWxlLm5hbWUpO1xyXG5cclxuICAgIC8vIFN0b3JlIHRoZSBwcm9jZXNzZWQgcmVzdWx0XHJcbiAgICBjb25zdCBwcm9jZXNzZWREYXRhID0ge1xyXG4gICAgICBvcmlnaW5hbE5hbWU6IGZpbGUubmFtZSxcclxuICAgICAgdHlwZTogJ2F1ZGlvJyxcclxuICAgICAgc2l6ZTogZmlsZS5zaXplLFxyXG4gICAgICBtaW1lVHlwZTogZmlsZS50eXBlLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiByZXNwb25zZSxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGRhdGE6IGJhc2U2NERhdGFcclxuICAgIH07XHJcblxyXG4gICAgYXdhaXQgaW5zZXJ0RGF0YSgnYXVkaW8nLCBKU09OLnN0cmluZ2lmeShwcm9jZXNzZWREYXRhKSk7XHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkRGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyBhdWRpbzonLCBlcnJvcik7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgZmFsbGJhY2sgcHJvY2Vzc2VkIHJlc3VsdCB3aXRoIGVycm9yIGluZm9ybWF0aW9uXHJcbiAgICBjb25zdCBlcnJvckRhdGEgPSB7XHJcbiAgICAgIG9yaWdpbmFsTmFtZTogZmlsZSA/IGZpbGUubmFtZSA6ICd1bmtub3duJyxcclxuICAgICAgdHlwZTogJ2F1ZGlvJyxcclxuICAgICAgc2l6ZTogZmlsZSA/IGZpbGUuc2l6ZSA6IDAsXHJcbiAgICAgIG1pbWVUeXBlOiBmaWxlID8gZmlsZS50eXBlIDogJ3Vua25vd24nLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiBgRXJyb3I6IFVuYWJsZSB0byBwcm9jZXNzIGF1ZGlvLiAke2Vycm9yLm1lc3NhZ2V9YCxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIGVycm9yOiB0cnVlXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFN0aWxsIHN0b3JlIHRoZSBlcnJvciByZXN1bHQgc28gdXNlciBjYW4gc2VlIGl0IGluIHZpc3VhbGl6YXRpb25zXHJcbiAgICBhd2FpdCBpbnNlcnREYXRhKCdhdWRpbycsIEpTT04uc3RyaW5naWZ5KGVycm9yRGF0YSkpO1xyXG5cclxuICAgIC8vIFJldHVybiB0aGUgZXJyb3IgZGF0YSByYXRoZXIgdGhhbiB0aHJvd2luZ1xyXG4gICAgcmV0dXJuIGVycm9yRGF0YTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBQcm9jZXNzIHRleHQgd2l0aCBBSVxyXG5jb25zdCBwcm9jZXNzVGV4dCA9IGFzeW5jICh0ZXh0KSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGlmICghdGV4dCB8fCB0eXBlb2YgdGV4dCAhPT0gJ3N0cmluZycgfHwgdGV4dC50cmltKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBvciBlbXB0eSB0ZXh0IGlucHV0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsbCBBSSBzZXJ2aWNlIGZvciB0ZXh0IGFuYWx5c2lzXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoQUlQcm9jZXNzaW5nKCd0ZXh0JywgdGV4dCk7XHJcblxyXG4gICAgLy8gU3RvcmUgdGhlIHByb2Nlc3NlZCByZXN1bHRcclxuICAgIGNvbnN0IHByb2Nlc3NlZERhdGEgPSB7XHJcbiAgICAgIHR5cGU6ICd0ZXh0JyxcclxuICAgICAgY29udGVudDogdGV4dCxcclxuICAgICAgcHJvY2Vzc2luZ1Jlc3VsdDogcmVzcG9uc2UsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICB9O1xyXG5cclxuICAgIGF3YWl0IGluc2VydERhdGEoJ3RleHQnLCBKU09OLnN0cmluZ2lmeShwcm9jZXNzZWREYXRhKSk7XHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkRGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyB0ZXh0OicsIGVycm9yKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBmYWxsYmFjayBwcm9jZXNzZWQgcmVzdWx0IHdpdGggZXJyb3IgaW5mb3JtYXRpb25cclxuICAgIGNvbnN0IGVycm9yRGF0YSA9IHtcclxuICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICBjb250ZW50OiB0ZXh0IHx8ICcnLFxyXG4gICAgICBwcm9jZXNzaW5nUmVzdWx0OiBgRXJyb3I6IFVuYWJsZSB0byBwcm9jZXNzIHRleHQuICR7ZXJyb3IubWVzc2FnZX1gLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgZXJyb3I6IHRydWVcclxuICAgIH07XHJcblxyXG4gICAgLy8gU3RpbGwgc3RvcmUgdGhlIGVycm9yIHJlc3VsdCBzbyB1c2VyIGNhbiBzZWUgaXQgaW4gdmlzdWFsaXphdGlvbnNcclxuICAgIGF3YWl0IGluc2VydERhdGEoJ3RleHQnLCBKU09OLnN0cmluZ2lmeShlcnJvckRhdGEpKTtcclxuXHJcbiAgICAvLyBSZXR1cm4gdGhlIGVycm9yIGRhdGEgcmF0aGVyIHRoYW4gdGhyb3dpbmdcclxuICAgIHJldHVybiBlcnJvckRhdGE7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gRnVuY3Rpb24gdG8gY2FsbCByZWxldmFudCBBUEkgZm9yIHByb2Nlc3NpbmcgYmFzZWQgb24gbWVkaWEgdHlwZVxyXG5jb25zdCBmZXRjaEFJUHJvY2Vzc2luZyA9IGFzeW5jIChtZWRpYVR5cGUsIGNvbnRlbnQsIGZpbGVuYW1lID0gJycpID0+IHtcclxuICAvLyBHZXQgQVBJIGtleXMgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZXNcclxuICBjb25zdCBvcGVuQUlBcGlLZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19PUEVOQUlfQVBJX0tFWTtcclxuICBjb25zdCBvcGVuUm91dGVyQXBpS2V5ID0gcHJvY2Vzcy5lbnYuT1BFTlJPVVRFUl9BUElfS0VZO1xyXG5cclxuICAvLyBFbnN1cmUgd2UgaGF2ZSBhbiBBUEkga2V5XHJcbiAgaWYgKCFvcGVuQUlBcGlLZXkgJiYgIW9wZW5Sb3V0ZXJBcGlLZXkpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0FQSSBrZXkgbm90IGZvdW5kIGluIGVudmlyb25tZW50IHZhcmlhYmxlcycpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdBUEkga2V5IGlzIHJlcXVpcmVkIGZvciBtZWRpYSBwcm9jZXNzaW5nJyk7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgc3dpdGNoKG1lZGlhVHlwZSkge1xyXG4gICAgICBjYXNlICdpbWFnZSc6XHJcbiAgICAgICAgLy8gVXNlIE9wZW5BSSBHUFQtNCBWaXNpb24gb3Igc2ltaWxhciBtb2RlbCBmb3IgaW1hZ2UgYW5hbHlzaXNcclxuICAgICAgICByZXR1cm4gYXdhaXQgcHJvY2Vzc0ltYWdlV2l0aEdQVDRWaXNpb24ob3BlbkFJQXBpS2V5LCBjb250ZW50LCBmaWxlbmFtZSk7XHJcbiAgICAgIGNhc2UgJ2F1ZGlvJzpcclxuICAgICAgICAvLyBVc2UgT3BlbkFJIFdoaXNwZXIgb3Igc2ltaWxhciBtb2RlbCBmb3IgYXVkaW8gcHJvY2Vzc2luZ1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBwcm9jZXNzQXVkaW9XaXRoV2hpc3BlcihvcGVuQUlBcGlLZXksIGNvbnRlbnQsIGZpbGVuYW1lKTtcclxuICAgICAgY2FzZSAndmlkZW8nOlxyXG4gICAgICAgIC8vIFVzZSBzcGVjaWFsaXplZCB2aWRlbyBwcm9jZXNzaW5nIGJ5IGV4dHJhY3RpbmcgZnJhbWVzIGFuZCBhdWRpb1xyXG4gICAgICAgIHJldHVybiBhd2FpdCBwcm9jZXNzVmlkZW9XaXRoRnJhbWVFeHRyYWN0aW9uKG9wZW5BSUFwaUtleSwgY29udGVudCwgZmlsZW5hbWUpO1xyXG4gICAgICBjYXNlICd0ZXh0JzpcclxuICAgICAgICAvLyBVc2UgT3BlblJvdXRlciBmb3IgdGV4dCBwcm9jZXNzaW5nIChhcyBpdCBoYXMgbW9yZSBjb3N0LWVmZmVjdGl2ZSBvcHRpb25zKVxyXG4gICAgICAgIHJldHVybiBhd2FpdCBwcm9jZXNzVGV4dFdpdGhHUFQob3BlblJvdXRlckFwaUtleSB8fCBvcGVuQUlBcGlLZXksIGNvbnRlbnQpO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbWVkaWEgdHlwZTogJHttZWRpYVR5cGV9YCk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGluIEFJIHByb2Nlc3NpbmcgZm9yICR7bWVkaWFUeXBlfTpgLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn07XHJcblxyXG4vLyBQcm9jZXNzIGltYWdlIHdpdGggT3BlbkFJIFZpc2lvbiBtb2RlbHNcclxuY29uc3QgcHJvY2Vzc0ltYWdlV2l0aEdQVDRWaXNpb24gPSBhc3luYyAoYXBpS2V5LCBpbWFnZURhdGEsIGZpbGVuYW1lKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnNvbGUubG9nKCdQcm9jZXNzaW5nIGltYWdlIHdpdGggT3BlbkFJIFZpc2lvbiBtb2RlbHMuLi4nKTsgICAgLy8gQ2hlY2sgaWYgd2UncmUgdXNpbmcgT3BlblJvdXRlciBvciBPcGVuQUkgYmFzZWQgb24gdGhlIEFQSSBrZXkgZm9ybWF0XHJcbiAgICAvLyBPcGVuUm91dGVyIGtleXMgc3RhcnQgd2l0aCBzay1vci0sIE9wZW5BSSBrZXlzIHN0YXJ0IHdpdGggc2stIChpbmNsdWRpbmcgc2stcHJvai0pXHJcbiAgICBjb25zdCBpc09wZW5Sb3V0ZXIgPSBhcGlLZXkuc3RhcnRzV2l0aCgnc2stb3ItJyk7XHJcbiAgICBsZXQgbW9kZWw7XHJcbiAgICBsZXQgZW5kcG9pbnQ7XHJcbiAgICBsZXQgaGVhZGVycyA9IHtcclxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7YXBpS2V5fWBcclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vIExvZyBBUEkga2V5IGZvcm1hdCBmb3IgZGVidWdnaW5nICh3aXRob3V0IHJldmVhbGluZyB0aGUgZnVsbCBrZXkpXHJcbiAgICBjb25zb2xlLmxvZyhgQVBJIGtleSBmb3JtYXQ6ICR7YXBpS2V5LnN1YnN0cmluZygwLCA3KX0uLi5gKTtcclxuXHJcbiAgICAvLyBTZWxlY3QgYXBwcm9wcmlhdGUgbW9kZWwgYW5kIGVuZHBvaW50IGJhc2VkIG9uIEFQSSBrZXkgdHlwZVxyXG4gICAgaWYgKGlzT3BlblJvdXRlcikge1xyXG4gICAgICBtb2RlbCA9ICdvcGVuYWkvZ3B0LTQtdmlzaW9uLXByZXZpZXcnOyAvLyBPcGVuUm91dGVyIGZvcm1hdCBmb3IgVmlzaW9uIG1vZGVsXHJcbiAgICAgIGVuZHBvaW50ID0gJ2h0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjEvY2hhdC9jb21wbGV0aW9ucyc7XHJcbiAgICAgIGhlYWRlcnNbJ0hUVFAtUmVmZXJlciddID0gJ2h0dHBzOi8vcHJlY2VrLmFwcCc7IC8vIFJlcXVpcmVkIGJ5IE9wZW5Sb3V0ZXJcclxuICAgICAgY29uc29sZS5sb2coJ1VzaW5nIE9wZW5Sb3V0ZXIgZm9yIGltYWdlIHByb2Nlc3NpbmcnKTsgICAgfSBlbHNlIHtcclxuICAgICAgLy8gVXNpbmcgT3BlbkFJIGRpcmVjdGx5XHJcbiAgICAgIG1vZGVsID0gJ2dwdC00LXZpc2lvbi1wcmV2aWV3JzsgLy8gTGF0ZXN0IHZpc2lvbiBtb2RlbFxyXG4gICAgICBlbmRwb2ludCA9ICdodHRwczovL2FwaS5vcGVuYWkuY29tL3YxL2NoYXQvY29tcGxldGlvbnMnO1xyXG4gICAgICBjb25zb2xlLmxvZygnVXNpbmcgT3BlbkFJIGRpcmVjdGx5IGZvciBpbWFnZSBwcm9jZXNzaW5nJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJvY2VzcyB0aGUgaW1hZ2UgZGF0YSAtIG1ha2Ugc3VyZSB3ZSBoYXZlIGEgcHJvcGVyIGZvcm1hdFxyXG4gICAgbGV0IGJhc2U2NEltYWdlID0gaW1hZ2VEYXRhO1xyXG4gICAgaWYgKGJhc2U2NEltYWdlLmluY2x1ZGVzKCcsJykpIHtcclxuICAgICAgLy8gRXh0cmFjdCB0aGUgYmFzZTY0IHBhcnQgYWZ0ZXIgdGhlIGNvbW1hIGlmIGl0J3MgYSBkYXRhIFVSTFxyXG4gICAgICBiYXNlNjRJbWFnZSA9IGJhc2U2NEltYWdlLnNwbGl0KCcsJylbMV07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IGltYWdlIGRldGFpbHNcclxuICAgIGNvbnN0IGltZ0RldGFpbHMgPSBhd2FpdCBnZXRJbWFnZURldGFpbHMoaW1hZ2VEYXRhKTtcclxuICAgIGNvbnNvbGUubG9nKGBJbWFnZSB2YWxpZGF0ZWQ6ICR7ZmlsZW5hbWV9ICgke2ltZ0RldGFpbHMud2lkdGh9eCR7aW1nRGV0YWlscy5oZWlnaHR9LCAke2ltZ0RldGFpbHMuZm9ybWF0fSlgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIEFQSSByZXF1ZXN0IGJvZHlcclxuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0ge1xyXG4gICAgICBtb2RlbDogbW9kZWwsXHJcbiAgICAgIG1lc3NhZ2VzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcm9sZTogJ3VzZXInLFxyXG4gICAgICAgICAgY29udGVudDogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICAgIHRleHQ6IGBQbGVhc2UgYW5hbHl6ZSB0aGlzIGltYWdlIHRob3JvdWdobHkgYW5kIHByb3ZpZGU6XHJcbjEuIERlc2NyaXB0aW9uIG9mIG1haW4gc3ViamVjdHMgYW5kIGVsZW1lbnRzXHJcbjIuIENvbG9ycywgbGlnaHRpbmcsIGFuZCBjb21wb3NpdGlvbiBhbmFseXNpc1xyXG4zLiBBbnkgdGV4dCB2aXNpYmxlIGluIHRoZSBpbWFnZSAodHJhbnNjcmliZSBleGFjdGx5KVxyXG40LiBDb250ZXh0IGFuZCBwb3RlbnRpYWwgbWVhbmluZy9wdXJwb3NlIG9mIHRoZSBpbWFnZVxyXG41LiBBbnkgbm90YWJsZSBvYmplY3RzLCBsYW5kbWFya3MsIG9yIHBlb3BsZVxyXG42LiBJbWFnZSBxdWFsaXR5IGFuZCB0ZWNobmljYWwgYXNzZXNzbWVudFxyXG5cclxuRmlsZW5hbWU6ICR7ZmlsZW5hbWUgfHwgJ3VwbG9hZGVkIGltYWdlJ31gXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2VfdXJsJyxcclxuICAgICAgICAgICAgICBpbWFnZV91cmw6IHtcclxuICAgICAgICAgICAgICAgIHVybDogYGRhdGE6JHtpbWdEZXRhaWxzLm1pbWVUeXBlfTtiYXNlNjQsJHtiYXNlNjRJbWFnZX1gXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfVxyXG4gICAgICBdLFxyXG4gICAgICBtYXhfdG9rZW5zOiAxMDAwLFxyXG4gICAgICB0ZW1wZXJhdHVyZTogMC43XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE1ha2UgdGhlIEFQSSByZXF1ZXN0XHJcbiAgICBjb25zb2xlLmxvZyhgU2VuZGluZyByZXF1ZXN0IHRvICR7aXNPcGVuUm91dGVyID8gJ09wZW5Sb3V0ZXInIDogJ09wZW5BSSd9IEFQSS4uLmApO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcyh7XHJcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICB1cmw6IGVuZHBvaW50LFxyXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICBkYXRhOiByZXF1ZXN0Qm9keSxcclxuICAgICAgdGltZW91dDogNjAwMDAgLy8gNjAgc2Vjb25kIHRpbWVvdXQgZm9yIGltYWdlIHByb2Nlc3NpbmdcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChyZXNwb25zZS5kYXRhICYmIHJlc3BvbnNlLmRhdGEuY2hvaWNlcyAmJiByZXNwb25zZS5kYXRhLmNob2ljZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnSW1hZ2Ugc3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZCBieSB2aXNpb24gbW9kZWwnKTtcclxuICAgICAgcmV0dXJuIGZvcm1hdEltYWdlQW5hbHlzaXMocmVzcG9uc2UuZGF0YS5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudCwgZmlsZW5hbWUsIGltZ0RldGFpbHMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBBUEkgcmVzcG9uc2UgZm9ybWF0OicsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwcm9jZXNzIGltYWdlIHdpdGggQUkgbW9kZWw6IGludmFsaWQgcmVzcG9uc2UgZm9ybWF0Jyk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0ltYWdlIHByb2Nlc3NpbmcgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgLy8gQ2hlY2sgZm9yIHNwZWNpZmljIEFQSSBlcnJvciB0eXBlc1xyXG4gICAgaWYgKGVycm9yLnJlc3BvbnNlKSB7XHJcbiAgICAgIGNvbnN0IHN0YXR1cyA9IGVycm9yLnJlc3BvbnNlLnN0YXR1cztcclxuICAgICAgY29uc3QgZGF0YSA9IGVycm9yLnJlc3BvbnNlLmRhdGE7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoc3RhdHVzID09PSA0MDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEltYWdlIHByb2Nlc3NpbmcgZmFpbGVkOiBCYWQgcmVxdWVzdCAtICR7ZGF0YS5lcnJvcj8ubWVzc2FnZSB8fCAnSW52YWxpZCByZXF1ZXN0IHBhcmFtZXRlcnMnfWApO1xyXG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbWFnZSBwcm9jZXNzaW5nIGZhaWxlZDogSW52YWxpZCBBUEkga2V5IG9yIHVuYXV0aG9yaXplZCBhY2Nlc3MnKTtcclxuICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQyOSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW1hZ2UgcHJvY2Vzc2luZyBmYWlsZWQ6IFJhdGUgbGltaXQgZXhjZWVkZWQgb3IgaW5zdWZmaWNpZW50IHF1b3RhJyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSA1MDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltYWdlIHByb2Nlc3NpbmcgZmFpbGVkOiBPcGVuQUkgc2VydmljZSBlcnJvcicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEdlbmVyaWMgZXJyb3IgaWYgbm90IGNhdWdodCBieSBzcGVjaWZpY3MgYWJvdmVcclxuICAgIHRocm93IG5ldyBFcnJvcihgSW1hZ2UgcHJvY2Vzc2luZyBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGltYWdlIGRldGFpbHNcclxuY29uc3QgZ2V0SW1hZ2VEZXRhaWxzID0gYXN5bmMgKGltYWdlRGF0YSkgPT4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIFxyXG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgLy8gR2V0IGltYWdlIGZvcm1hdCBmcm9tIGRhdGEgVVJMXHJcbiAgICAgIGxldCBmb3JtYXQgPSAnanBlZyc7IC8vIERlZmF1bHRcclxuICAgICAgbGV0IG1pbWVUeXBlID0gJ2ltYWdlL2pwZWcnOyAvLyBEZWZhdWx0XHJcbiAgICAgIFxyXG4gICAgICBpZiAoaW1hZ2VEYXRhLmluY2x1ZGVzKCdkYXRhOicpKSB7XHJcbiAgICAgICAgY29uc3QgbWltZU1hdGNoID0gaW1hZ2VEYXRhLm1hdGNoKC9kYXRhOihbXjtdKyk7Lyk7XHJcbiAgICAgICAgaWYgKG1pbWVNYXRjaCAmJiBtaW1lTWF0Y2hbMV0pIHtcclxuICAgICAgICAgIG1pbWVUeXBlID0gbWltZU1hdGNoWzFdO1xyXG4gICAgICAgICAgZm9ybWF0ID0gbWltZU1hdGNoWzFdLnNwbGl0KCcvJylbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXNvbHZlKHtcclxuICAgICAgICB3aWR0aDogaW1nLndpZHRoLFxyXG4gICAgICAgIGhlaWdodDogaW1nLmhlaWdodCxcclxuICAgICAgICBmb3JtYXQ6IGZvcm1hdCxcclxuICAgICAgICBtaW1lVHlwZTogbWltZVR5cGUsXHJcbiAgICAgICAgYXNwZWN0UmF0aW86IGltZy53aWR0aCAvIGltZy5oZWlnaHRcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBpbWcub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgcmVqZWN0KG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgaW1hZ2UgZm9yIGFuYWx5c2lzJykpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgaW1nLnNyYyA9IGltYWdlRGF0YTtcclxuICB9KTtcclxufTtcclxuXHJcbi8vIEZvcm1hdCB0aGUgaW1hZ2UgYW5hbHlzaXMgaW4gYSBzdHJ1Y3R1cmVkIHdheVxyXG5jb25zdCBmb3JtYXRJbWFnZUFuYWx5c2lzID0gKGNvbnRlbnQsIGZpbGVuYW1lLCBpbWFnZURldGFpbHMpID0+IHtcclxuICByZXR1cm4gYCMgSW1hZ2UgQW5hbHlzaXM6ICR7ZmlsZW5hbWUgfHwgJ1VwbG9hZGVkIEltYWdlJ31cclxuXHJcbiMjIFRlY2huaWNhbCBEZXRhaWxzXHJcbi0gRGltZW5zaW9uczogJHtpbWFnZURldGFpbHMud2lkdGh9eCR7aW1hZ2VEZXRhaWxzLmhlaWdodH0gcGl4ZWxzXHJcbi0gRm9ybWF0OiAke2ltYWdlRGV0YWlscy5mb3JtYXQudG9VcHBlckNhc2UoKX1cclxuLSBBc3BlY3QgUmF0aW86ICR7aW1hZ2VEZXRhaWxzLmFzcGVjdFJhdGlvLnRvRml4ZWQoMil9XHJcblxyXG4jIyBBbmFseXNpc1xyXG4ke2NvbnRlbnR9XHJcblxyXG4tLS1cclxuKkFuYWx5emVkIHdpdGggT3BlbkFJIFZpc2lvbiBNb2RlbCpgO1xyXG59O1xyXG5cclxuLy8gUHJvY2VzcyBhdWRpbyB3aXRoIFdoaXNwZXIgQVBJIGFjY29yZGluZyB0byBPcGVuQUkgZG9jc1xyXG4vLyBodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3BlZWNoLXRvLXRleHQvcXVpY2tzdGFydFxyXG5jb25zdCBwcm9jZXNzQXVkaW9XaXRoV2hpc3BlciA9IGFzeW5jIChhcGlLZXksIGF1ZGlvRGF0YSwgZmlsZW5hbWUpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc29sZS5sb2coJ1Byb2Nlc3NpbmcgYXVkaW8gd2l0aCBXaGlzcGVyIEFQSS4uLicpO1xyXG5cclxuICAgIC8vIENvbnZlcnQgYmFzZTY0IGF1ZGlvIGRhdGEgdG8gYSBCbG9iXHJcbiAgICBsZXQgYXVkaW9CYXNlNjQgPSBhdWRpb0RhdGE7XHJcbiAgICBpZiAoYXVkaW9CYXNlNjQuaW5jbHVkZXMoJywnKSkge1xyXG4gICAgICBhdWRpb0Jhc2U2NCA9IGF1ZGlvQmFzZTY0LnNwbGl0KCcsJylbMV07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBjb250ZW50IHR5cGUgZnJvbSB0aGUgZGF0YSBVUkwgb3IgZmlsZW5hbWVcclxuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gYXVkaW9EYXRhLmluY2x1ZGVzKCdkYXRhOicpXHJcbiAgICAgID8gYXVkaW9EYXRhLnNwbGl0KCc7JylbMF0uc3BsaXQoJzonKVsxXVxyXG4gICAgICA6IGZpbGVuYW1lLmVuZHNXaXRoKCcubXAzJykgPyAnYXVkaW8vbXAzJyA6ICdhdWRpby9tcGVnJztcclxuXHJcbiAgICAvLyBDb252ZXJ0IGJhc2U2NCB0byBhIEJsb2IgKGltcG9ydGFudCBmb3IgRm9ybURhdGEpXHJcbiAgICBjb25zdCBieXRlQ2hhcmFjdGVycyA9IGF0b2IoYXVkaW9CYXNlNjQpO1xyXG4gICAgY29uc3QgYnl0ZUFycmF5cyA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IGJ5dGVDaGFyYWN0ZXJzLmxlbmd0aDsgb2Zmc2V0ICs9IDEwMjQpIHtcclxuICAgICAgY29uc3Qgc2xpY2UgPSBieXRlQ2hhcmFjdGVycy5zbGljZShvZmZzZXQsIG9mZnNldCArIDEwMjQpO1xyXG5cclxuICAgICAgY29uc3QgYnl0ZU51bWJlcnMgPSBuZXcgQXJyYXkoc2xpY2UubGVuZ3RoKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGljZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGJ5dGVOdW1iZXJzW2ldID0gc2xpY2UuY2hhckNvZGVBdChpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZU51bWJlcnMpO1xyXG4gICAgICBieXRlQXJyYXlzLnB1c2goYnl0ZUFycmF5KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhdWRpb0Jsb2IgPSBuZXcgQmxvYihieXRlQXJyYXlzLCB7IHR5cGU6IGNvbnRlbnRUeXBlIH0pO1xyXG4gICAgY29uc29sZS5sb2coYENyZWF0ZWQgYXVkaW8gYmxvYiBvZiB0eXBlICR7Y29udGVudFR5cGV9LCBzaXplOiAke2F1ZGlvQmxvYi5zaXplfSBieXRlc2ApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIGZvcm0gZGF0YSBvYmplY3QgYXMgcmVxdWlyZWQgYnkgdGhlIFdoaXNwZXIgQVBJXHJcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgYXVkaW9CbG9iLCBmaWxlbmFtZSB8fCAnYXVkaW8ubXAzJyk7XHJcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ21vZGVsJywgJ3doaXNwZXItMScpO1xyXG4gICAgZm9ybURhdGEuYXBwZW5kKCdyZXNwb25zZV9mb3JtYXQnLCAnanNvbicpOyAvLyBHZXQgc3RydWN0dXJlZCBKU09OIHJlc3BvbnNlXHJcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ2xhbmd1YWdlJywgJ2VuJyk7IC8vIFNldCB0byBFbmdsaXNoIGZvciBiZXR0ZXIgYWNjdXJhY3lcclxuXHJcbiAgICAvLyBDYWxsIHRoZSBPcGVuQUkgV2hpc3BlciBBUElcclxuICAgIGNvbnNvbGUubG9nKCdTZW5kaW5nIHJlcXVlc3QgdG8gV2hpc3BlciBBUEkuLi4nKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3Moe1xyXG4gICAgICBtZXRob2Q6ICdwb3N0JyxcclxuICAgICAgdXJsOiAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9hdWRpby90cmFuc2NyaXB0aW9ucycsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHthcGlLZXl9YFxyXG4gICAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBzZXQgYXV0b21hdGljYWxseSBieSBheGlvcyB3aXRoIEZvcm1EYXRhXHJcbiAgICAgIH0sXHJcbiAgICAgIGRhdGE6IGZvcm1EYXRhXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgdmFsaWQgcmVzcG9uc2VcclxuICAgIGlmIChyZXNwb25zZS5kYXRhICYmIHJlc3BvbnNlLmRhdGEudGV4dCkge1xyXG4gICAgICBjb25zdCB0cmFuc2NyaXB0aW9uID0gcmVzcG9uc2UuZGF0YS50ZXh0O1xyXG4gICAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IHRyYW5zY3JpYmVkIGF1ZGlvJyk7XHJcblxyXG4gICAgICAvLyBOb3cgYW5hbHl6ZSB0aGUgdHJhbnNjcmlwdGlvbiB3aXRoIEdQVFxyXG4gICAgICBjb25zb2xlLmxvZygnQW5hbHl6aW5nIHRyYW5zY3JpcHRpb24gY29udGVudC4uLicpO1xyXG4gICAgICBjb25zdCBhbmFseXNpc1Jlc3BvbnNlID0gYXdhaXQgYXhpb3Moe1xyXG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgIHVybDogJ2h0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvY2hhdC9jb21wbGV0aW9ucycsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke2FwaUtleX1gXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICBtb2RlbDogJ2dwdC0zLjUtdHVyYm8nLFxyXG4gICAgICAgICAgbWVzc2FnZXM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcclxuICAgICAgICAgICAgICBjb250ZW50OiBgQW5hbHl6ZSB0aGlzIGF1ZGlvIHRyYW5zY3JpcHRpb24gYW5kIHByb3ZpZGUgYSBzdW1tYXJ5IG9mIGtleSBwb2ludHMsIHRvcGljcywgYW5kIGFueSBub3RhYmxlIHBhdHRlcm5zIG9yIGluc2lnaHRzOlxcblxcbiR7dHJhbnNjcmlwdGlvbn1gXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgICBtYXhfdG9rZW5zOiA1MDBcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gQ29tYmluZSB0cmFuc2NyaXB0aW9uIGFuZCBhbmFseXNpc1xyXG4gICAgICBpZiAoYW5hbHlzaXNSZXNwb25zZS5kYXRhICYmIGFuYWx5c2lzUmVzcG9uc2UuZGF0YS5jaG9pY2VzICYmXHJcbiAgICAgICAgICBhbmFseXNpc1Jlc3BvbnNlLmRhdGEuY2hvaWNlcy5sZW5ndGggPiAwICYmXHJcbiAgICAgICAgICBhbmFseXNpc1Jlc3BvbnNlLmRhdGEuY2hvaWNlc1swXS5tZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIGAjIyBBdWRpbyBUcmFuc2NyaXB0aW9uXFxuXFxuJHt0cmFuc2NyaXB0aW9ufVxcblxcbiMjIEFuYWx5c2lzXFxuXFxuJHthbmFseXNpc1Jlc3BvbnNlLmRhdGEuY2hvaWNlc1swXS5tZXNzYWdlLmNvbnRlbnR9YDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYCMjIEF1ZGlvIFRyYW5zY3JpcHRpb25cXG5cXG4ke3RyYW5zY3JpcHRpb259XFxuXFxuKEFuYWx5c2lzIHVuYXZhaWxhYmxlKWA7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgQVBJIHJlc3BvbnNlIGZvcm1hdDonLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gdHJhbnNjcmliZSBhdWRpbzogdW5leHBlY3RlZCByZXNwb25zZSBmb3JtYXQnKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignQXVkaW8gcHJvY2Vzc2luZyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignQVBJIGVycm9yIHJlc3BvbnNlOicsIGVycm9yLnJlc3BvbnNlLmRhdGEpO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBBdWRpbyBwcm9jZXNzaW5nIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIFByb2Nlc3MgdmlkZW8gYnkgZXh0cmFjdGluZyBtdWx0aXBsZSBmcmFtZXMgZm9yIGFuYWx5c2lzXHJcbmNvbnN0IHByb2Nlc3NWaWRlb1dpdGhGcmFtZUV4dHJhY3Rpb24gPSBhc3luYyAoYXBpS2V5LCB2aWRlb0RhdGEsIGZpbGVuYW1lKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnNvbGUubG9nKCdQcm9jZXNzaW5nIHZpZGVvIHdpdGggZnJhbWUgZXh0cmFjdGlvbi4uLicpO1xyXG5cclxuICAgIC8vIENvbnZlcnQgZGF0YSBVUkwgdG8gQmxvYiBmb3IgdmlkZW8gZWxlbWVudFxyXG4gICAgY29uc3QgdmlkZW9CbG9iID0gYXdhaXQgZmV0Y2godmlkZW9EYXRhKS50aGVuKHJlcyA9PiByZXMuYmxvYigpKTtcclxuICAgIGNvbnN0IHZpZGVvVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTCh2aWRlb0Jsb2IpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIHZpZGVvIGVsZW1lbnQgdG8gZXh0cmFjdCBmcmFtZXNcclxuICAgIGNvbnN0IHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuICAgIHZpZGVvLm11dGVkID0gdHJ1ZTsgLy8gUmVxdWlyZWQgZm9yIGF1dG9wbGF5IGluIHNvbWUgYnJvd3NlcnNcclxuICAgIHZpZGVvLnBsYXlzSW5saW5lID0gdHJ1ZTtcclxuICAgIHZpZGVvLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XHJcbiAgICB2aWRlby5zcmMgPSB2aWRlb1VybDtcclxuXHJcbiAgICAvLyBXYWl0IGZvciBtZXRhZGF0YSB0byBsb2FkXHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHZpZGVvLm9ubG9hZGVkbWV0YWRhdGEgPSByZXNvbHZlO1xyXG4gICAgICB2aWRlby5vbmVycm9yID0gcmVqZWN0O1xyXG4gICAgICB2aWRlby5sb2FkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhgVmlkZW8gbG9hZGVkOiBEdXJhdGlvbiAke3ZpZGVvLmR1cmF0aW9ufXMsIERpbWVuc2lvbnM6ICR7dmlkZW8udmlkZW9XaWR0aH14JHt2aWRlby52aWRlb0hlaWdodH1gKTtcclxuXHJcbiAgICAvLyBFeHRyYWN0IG11bHRpcGxlIGZyYW1lcyBmcm9tIGRpZmZlcmVudCBwb2ludHMgaW4gdGhlIHZpZGVvXHJcbiAgICBjb25zdCBmcmFtZUNvdW50ID0gTWF0aC5taW4oMywgTWF0aC5tYXgoMSwgTWF0aC5mbG9vcih2aWRlby5kdXJhdGlvbiAvIDUpKSk7XHJcbiAgICBjb25zdCBmcmFtZXMgPSBbXTtcclxuXHJcbiAgICAvLyBDcmVhdGUgY2FudmFzIGZvciBmcmFtZSBleHRyYWN0aW9uXHJcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgIGNhbnZhcy53aWR0aCA9IHZpZGVvLnZpZGVvV2lkdGg7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gdmlkZW8udmlkZW9IZWlnaHQ7XHJcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICAvLyBFeHRyYWN0IGZyYW1lcyBhdCBkaWZmZXJlbnQgdGltZXN0YW1wc1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFtZUNvdW50OyBpKyspIHtcclxuICAgICAgY29uc3QgdGltZXN0YW1wID0gaSAqICh2aWRlby5kdXJhdGlvbiAvIChmcmFtZUNvdW50ICsgMSkpO1xyXG5cclxuICAgICAgLy8gU2VlayB0byB0aW1lc3RhbXBcclxuICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSB0aW1lc3RhbXA7XHJcblxyXG4gICAgICAvLyBXYWl0IGZvciBzZWVrIHRvIGNvbXBsZXRlXHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgIHZpZGVvLm9uc2Vla2VkID0gcmVzb2x2ZTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBEcmF3IGZyYW1lIHRvIGNhbnZhc1xyXG4gICAgICBjdHguZHJhd0ltYWdlKHZpZGVvLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgICAgLy8gR2V0IGZyYW1lIGFzIGRhdGEgVVJMXHJcbiAgICAgIGNvbnN0IGZyYW1lRGF0YVVybCA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL2pwZWcnLCAwLjgpO1xyXG5cclxuICAgICAgZnJhbWVzLnB1c2goe1xyXG4gICAgICAgIHRpbWVzdGFtcCxcclxuICAgICAgICBkYXRhVXJsOiBmcmFtZURhdGFVcmxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhgRXh0cmFjdGVkIGZyYW1lIGF0ICR7dGltZXN0YW1wLnRvRml4ZWQoMil9c2ApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENsZWFuIHVwIHZpZGVvIHJlc291cmNlc1xyXG4gICAgVVJMLnJldm9rZU9iamVjdFVSTCh2aWRlb1VybCk7XHJcblxyXG4gICAgLy8gQW5hbHl6ZSBmcmFtZXMgd2l0aCBWaXNpb24gQVBJXHJcbiAgICBjb25zb2xlLmxvZygnQW5hbHl6aW5nIHZpZGVvIGZyYW1lcyB3aXRoIFZpc2lvbiBBUEkuLi4nKTtcclxuICAgIGNvbnN0IGZyYW1lQW5hbHlzZXMgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBmcmFtZSA9IGZyYW1lc1tpXTtcclxuICAgICAgY29uc3QgYW5hbHlzaXMgPSBhd2FpdCBwcm9jZXNzSW1hZ2VXaXRoR1BUNFZpc2lvbihcclxuICAgICAgICBhcGlLZXksXHJcbiAgICAgICAgZnJhbWUuZGF0YVVybCxcclxuICAgICAgICBgRnJhbWUgYXQgJHtmcmFtZS50aW1lc3RhbXAudG9GaXhlZCgyKX1zIGZyb20gJHtmaWxlbmFtZX1gXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBmcmFtZUFuYWx5c2VzLnB1c2goe1xyXG4gICAgICAgIHRpbWVzdGFtcDogZnJhbWUudGltZXN0YW1wLFxyXG4gICAgICAgIGFuYWx5c2lzXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENvbWJpbmUgYWxsIGZyYW1lIGFuYWx5c2VzIGludG8gYSBjb21wcmVoZW5zaXZlIHZpZGVvIGFuYWx5c2lzXHJcbiAgICBjb25zdCBmb3JtYXR0ZWRBbmFseXNlcyA9IGZyYW1lQW5hbHlzZXMubWFwKGZhID0+XHJcbiAgICAgIGAjIyMgRnJhbWUgYXQgJHtmYS50aW1lc3RhbXAudG9GaXhlZCgyKX1zOlxcbiR7ZmEuYW5hbHlzaXN9YFxyXG4gICAgKS5qb2luKCdcXG5cXG4nKTtcclxuXHJcbiAgICByZXR1cm4gYCMgVmlkZW8gQW5hbHlzaXMgZm9yOiAke2ZpbGVuYW1lfVxyXG5cclxuIyMgVGVjaG5pY2FsIERldGFpbHNcclxuLSBEdXJhdGlvbjogJHtNYXRoLnJvdW5kKHZpZGVvLmR1cmF0aW9uKX0gc2Vjb25kc1xyXG4tIERpbWVuc2lvbnM6ICR7dmlkZW8udmlkZW9XaWR0aH14JHt2aWRlby52aWRlb0hlaWdodH1cclxuLSBGb3JtYXQ6ICR7dmlkZW9CbG9iLnR5cGV9XHJcbi0gRmlsZSBTaXplOiAkeyh2aWRlb0Jsb2Iuc2l6ZSAvICgxMDI0ICogMTAyNCkpLnRvRml4ZWQoMil9IE1CXHJcblxyXG4jIyBDb250ZW50IEFuYWx5c2lzXHJcbiR7Zm9ybWF0dGVkQW5hbHlzZXN9XHJcblxyXG5UaGlzIGFuYWx5c2lzIGlzIGJhc2VkIG9uICR7ZnJhbWVDb3VudH0ga2V5IGZyYW1lcyBleHRyYWN0ZWQgZnJvbSB0aGUgdmlkZW8uYDtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignVmlkZW8gcHJvY2Vzc2luZyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFZpZGVvIHByb2Nlc3NpbmcgZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gUHJvY2VzcyB0ZXh0IHdpdGggR1BUIG1vZGVsIHRocm91Z2ggT3BlblJvdXRlclxyXG5jb25zdCBwcm9jZXNzVGV4dFdpdGhHUFQgPSBhc3luYyAoYXBpS2V5LCB0ZXh0KSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIERldGVybWluZSBpZiB3ZSdyZSB1c2luZyBPcGVuUm91dGVyIG9yIE9wZW5BSSBiYXNlZCBvbiB0aGUgQVBJIGtleSBmb3JtYXRcclxuICAgIGNvbnN0IGlzT3BlblJvdXRlciA9IGFwaUtleS5zdGFydHNXaXRoKCdzay1vci0nKTtcclxuICAgIGNvbnN0IGVuZHBvaW50ID0gaXNPcGVuUm91dGVyXHJcbiAgICAgID8gJ2h0dHBzOi8vb3BlbnJvdXRlci5haS9hcGkvdjEvY2hhdC9jb21wbGV0aW9ucydcclxuICAgICAgOiAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJztcclxuXHJcbiAgICAvLyBVc2UgYSBtb3JlIGNvc3QtZWZmZWN0aXZlIG1vZGVsIGlmIGdvaW5nIHRocm91Z2ggT3BlblJvdXRlclxyXG4gICAgY29uc3QgbW9kZWwgPSBpc09wZW5Sb3V0ZXIgPyAnb3BlbmFpL2dwdC0zLjUtdHVyYm8nIDogJ2dwdC0zLjUtdHVyYm8nO1xyXG5cclxuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0ge1xyXG4gICAgICBtb2RlbDogbW9kZWwsXHJcbiAgICAgIG1lc3NhZ2VzOiBbeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHRleHQgfV0sXHJcbiAgICAgIG1heF90b2tlbnM6IDEwMDBcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KFxyXG4gICAgICBlbmRwb2ludCxcclxuICAgICAgcmVxdWVzdEJvZHksXHJcbiAgICAgIHtcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7YXBpS2V5fWBcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgaWYgKHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5jaG9pY2VzICYmIHJlc3BvbnNlLmRhdGEuY2hvaWNlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBBUEkgcmVzcG9uc2UgZm9ybWF0OicsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwcm9jZXNzIHRleHQgd2l0aCBBSSBtb2RlbCcpO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdUZXh0IHByb2Nlc3NpbmcgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBUZXh0IHByb2Nlc3NpbmcgZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHsgcHJvY2Vzc0ltYWdlLCBwcm9jZXNzQXVkaW8sIHByb2Nlc3NWaWRlbywgcHJvY2Vzc1RleHQgfTtcclxuIl0sIm5hbWVzIjpbImF4aW9zIiwiaW5zZXJ0RGF0YSIsInJlYWRGaWxlQXNCYXNlNjQiLCJmaWxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwicmVzdWx0Iiwib25lcnJvciIsImVycm9yIiwicmVhZEFzRGF0YVVSTCIsInByb2Nlc3NJbWFnZSIsIl9yZWYiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsImJhc2U2NERhdGEiLCJyZXNwb25zZSIsInByb2Nlc3NlZERhdGEiLCJlcnJvckRhdGEiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwiYWJydXB0IiwidHlwZSIsInN0YXJ0c1dpdGgiLCJFcnJvciIsImNvbmNhdCIsInNlbnQiLCJlbnN1cmVWYWxpZEltYWdlRGF0YSIsIm5hbWUiLCJmZXRjaEFJUHJvY2Vzc2luZyIsIm9yaWdpbmFsTmFtZSIsInNpemUiLCJtaW1lVHlwZSIsInByb2Nlc3NpbmdSZXN1bHQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsInQwIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJzdG9wIiwiX3giLCJhcHBseSIsImFyZ3VtZW50cyIsIl9yZWYyIiwiX2NhbGxlZTIiLCJmaWxlbmFtZSIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsImltZyIsIkltYWdlIiwibG9nIiwid2lkdGgiLCJoZWlnaHQiLCJzcmMiLCJfeDIiLCJfeDMiLCJwcm9jZXNzVmlkZW8iLCJfcmVmMyIsIl9jYWxsZWUzIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiX3g0IiwicHJvY2Vzc0F1ZGlvIiwiX3JlZjQiLCJfY2FsbGVlNCIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NCIsIl94NSIsInByb2Nlc3NUZXh0IiwiX3JlZjUiLCJfY2FsbGVlNSIsInRleHQiLCJfY2FsbGVlNSQiLCJfY29udGV4dDUiLCJ0cmltIiwibGVuZ3RoIiwiY29udGVudCIsIl94NiIsIl9yZWY2IiwiX2NhbGxlZTYiLCJtZWRpYVR5cGUiLCJvcGVuQUlBcGlLZXkiLCJvcGVuUm91dGVyQXBpS2V5IiwiX2FyZ3M2IiwiX2NhbGxlZTYkIiwiX2NvbnRleHQ2IiwidW5kZWZpbmVkIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX09QRU5BSV9BUElfS0VZIiwiT1BFTlJPVVRFUl9BUElfS0VZIiwicHJvY2Vzc0ltYWdlV2l0aEdQVDRWaXNpb24iLCJwcm9jZXNzQXVkaW9XaXRoV2hpc3BlciIsInByb2Nlc3NWaWRlb1dpdGhGcmFtZUV4dHJhY3Rpb24iLCJwcm9jZXNzVGV4dFdpdGhHUFQiLCJ0MSIsIl94NyIsIl94OCIsIl9yZWY3IiwiX2NhbGxlZTciLCJhcGlLZXkiLCJpbWFnZURhdGEiLCJpc09wZW5Sb3V0ZXIiLCJtb2RlbCIsImVuZHBvaW50IiwiaGVhZGVycyIsImJhc2U2NEltYWdlIiwiaW1nRGV0YWlscyIsInJlcXVlc3RCb2R5Iiwic3RhdHVzIiwiX2RhdGEkZXJyb3IiLCJfY2FsbGVlNyQiLCJfY29udGV4dDciLCJzdWJzdHJpbmciLCJpbmNsdWRlcyIsInNwbGl0IiwiZ2V0SW1hZ2VEZXRhaWxzIiwiZm9ybWF0IiwibWVzc2FnZXMiLCJyb2xlIiwiaW1hZ2VfdXJsIiwidXJsIiwibWF4X3Rva2VucyIsInRlbXBlcmF0dXJlIiwibWV0aG9kIiwidGltZW91dCIsImNob2ljZXMiLCJmb3JtYXRJbWFnZUFuYWx5c2lzIiwiX3g5IiwiX3gxMCIsIl94MTEiLCJfcmVmOCIsIl9jYWxsZWU4IiwiX2NhbGxlZTgkIiwiX2NvbnRleHQ4IiwibWltZU1hdGNoIiwibWF0Y2giLCJhc3BlY3RSYXRpbyIsIl94MTIiLCJpbWFnZURldGFpbHMiLCJ0b1VwcGVyQ2FzZSIsInRvRml4ZWQiLCJfcmVmOSIsIl9jYWxsZWU5IiwiYXVkaW9EYXRhIiwiYXVkaW9CYXNlNjQiLCJjb250ZW50VHlwZSIsImJ5dGVDaGFyYWN0ZXJzIiwiYnl0ZUFycmF5cyIsIm9mZnNldCIsInNsaWNlIiwiYnl0ZU51bWJlcnMiLCJpIiwiYnl0ZUFycmF5IiwiYXVkaW9CbG9iIiwiZm9ybURhdGEiLCJ0cmFuc2NyaXB0aW9uIiwiYW5hbHlzaXNSZXNwb25zZSIsIl9jYWxsZWU5JCIsIl9jb250ZXh0OSIsImVuZHNXaXRoIiwiYXRvYiIsIkFycmF5IiwiY2hhckNvZGVBdCIsIlVpbnQ4QXJyYXkiLCJwdXNoIiwiQmxvYiIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiX3gxMyIsIl94MTQiLCJfeDE1IiwiX3JlZjEwIiwiX2NhbGxlZTEwIiwidmlkZW9EYXRhIiwidmlkZW9CbG9iIiwidmlkZW9VcmwiLCJ2aWRlbyIsImZyYW1lQ291bnQiLCJmcmFtZXMiLCJjYW52YXMiLCJjdHgiLCJmcmFtZURhdGFVcmwiLCJmcmFtZUFuYWx5c2VzIiwiX2kiLCJmcmFtZSIsImFuYWx5c2lzIiwiZm9ybWF0dGVkQW5hbHlzZXMiLCJfY2FsbGVlMTAkIiwiX2NvbnRleHQxMCIsImZldGNoIiwidGhlbiIsInJlcyIsImJsb2IiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJtdXRlZCIsInBsYXlzSW5saW5lIiwiY3Jvc3NPcmlnaW4iLCJvbmxvYWRlZG1ldGFkYXRhIiwibG9hZCIsImR1cmF0aW9uIiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0IiwiTWF0aCIsIm1pbiIsIm1heCIsImZsb29yIiwiZ2V0Q29udGV4dCIsImN1cnJlbnRUaW1lIiwib25zZWVrZWQiLCJkcmF3SW1hZ2UiLCJ0b0RhdGFVUkwiLCJkYXRhVXJsIiwicmV2b2tlT2JqZWN0VVJMIiwibWFwIiwiZmEiLCJqb2luIiwicm91bmQiLCJfeDE2IiwiX3gxNyIsIl94MTgiLCJfcmVmMTEiLCJfY2FsbGVlMTEiLCJfY2FsbGVlMTEkIiwiX2NvbnRleHQxMSIsInBvc3QiLCJfeDE5IiwiX3gyMCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/services/multimediaProcessor.js\n"));

/***/ })

});