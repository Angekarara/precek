"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./src/services/multimediaProcessor.js":
/*!*********************************************!*\
  !*** ./src/services/multimediaProcessor.js ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processAudio: () => (/* binding */ processAudio),\n/* harmony export */   processImage: () => (/* binding */ processImage),\n/* harmony export */   processText: () => (/* binding */ processText),\n/* harmony export */   processVideo: () => (/* binding */ processVideo)\n/* harmony export */ });\n/* harmony import */ var C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator.js */ \"(pages-dir-browser)/./node_modules/next/dist/compiled/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@babel/runtime/regenerator/index.js */ \"(pages-dir-browser)/./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(pages-dir-browser)/./node_modules/axios/index.js\");\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./database */ \"(pages-dir-browser)/./src/services/database.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\n// This file will handle multimedia processing and AI integrations using web-compatible APIs\n\n\n\n// Function to read file data as base64\nvar readFileAsBase64 = function readFileAsBase64(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onload = function () {\n      return resolve(reader.result);\n    };\n    reader.onerror = function (error) {\n      return reject(error);\n    };\n    reader.readAsDataURL(file);\n  });\n};\n\n// Process image file with AI\nvar processImage = /*#__PURE__*/function () {\n  var _ref = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(file) {\n    var base64Data, response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          if (file) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", null);\n        case 3:\n          if (file.type.startsWith('image/')) {\n            _context.next = 5;\n            break;\n          }\n          throw new Error(\"File type \".concat(file.type, \" is not supported for image processing\"));\n        case 5:\n          _context.next = 7;\n          return readFileAsBase64(file);\n        case 7:\n          base64Data = _context.sent;\n          _context.next = 10;\n          return ensureValidImageData(base64Data, file.name);\n        case 10:\n          _context.next = 12;\n          return fetchAIProcessing('image', base64Data, file.name);\n        case 12:\n          response = _context.sent;\n          // Store the processed result\n          processedData = {\n            originalName: file.name,\n            type: 'image',\n            size: file.size,\n            mimeType: file.type,\n            processingResult: response,\n            timestamp: new Date().toISOString(),\n            data: base64Data\n          };\n          _context.next = 16;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('image', JSON.stringify(processedData));\n        case 16:\n          return _context.abrupt(\"return\", processedData);\n        case 19:\n          _context.prev = 19;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('Error processing image:', _context.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            originalName: file ? file.name : 'unknown',\n            type: 'image',\n            size: file ? file.size : 0,\n            mimeType: file ? file.type : 'unknown',\n            processingResult: \"Error: Unable to process image. \".concat(_context.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context.next = 25;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('image', JSON.stringify(errorData));\n        case 25:\n          return _context.abrupt(\"return\", errorData);\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 19]]);\n  }));\n  return function processImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// Helper function to validate image data before sending to API\nvar ensureValidImageData = /*#__PURE__*/function () {\n  var _ref2 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2(base64Data, filename) {\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n            // Create an image element to test loading\n            var img = new Image();\n            img.onload = function () {\n              // If image loads successfully it's valid\n              console.log(\"Image validated: \".concat(filename, \" (\").concat(img.width, \"x\").concat(img.height, \")\"));\n              resolve(true);\n            };\n            img.onerror = function () {\n              reject(new Error('Invalid image data or format'));\n            };\n\n            // Set source to test loading\n            img.src = base64Data;\n          }));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function ensureValidImageData(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n// Process video file with AI\nvar processVideo = /*#__PURE__*/function () {\n  var _ref3 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee3(file) {\n    var base64Data, response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          if (file) {\n            _context3.next = 3;\n            break;\n          }\n          return _context3.abrupt(\"return\", null);\n        case 3:\n          if (file.type.startsWith('video/')) {\n            _context3.next = 5;\n            break;\n          }\n          throw new Error(\"File type \".concat(file.type, \" is not supported for video processing\"));\n        case 5:\n          _context3.next = 7;\n          return readFileAsBase64(file);\n        case 7:\n          base64Data = _context3.sent;\n          _context3.next = 10;\n          return fetchAIProcessing('video', base64Data, file.name);\n        case 10:\n          response = _context3.sent;\n          // Store the processed result\n          processedData = {\n            originalName: file.name,\n            type: 'video',\n            size: file.size,\n            mimeType: file.type,\n            processingResult: response,\n            timestamp: new Date().toISOString(),\n            data: base64Data\n          };\n          _context3.next = 14;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('video', JSON.stringify(processedData));\n        case 14:\n          return _context3.abrupt(\"return\", processedData);\n        case 17:\n          _context3.prev = 17;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error('Error processing video:', _context3.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            originalName: file ? file.name : 'unknown',\n            type: 'video',\n            size: file ? file.size : 0,\n            mimeType: file ? file.type : 'unknown',\n            processingResult: \"Error: Unable to process video. \".concat(_context3.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context3.next = 23;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('video', JSON.stringify(errorData));\n        case 23:\n          return _context3.abrupt(\"return\", errorData);\n        case 24:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 17]]);\n  }));\n  return function processVideo(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n// Process audio with AI\nvar processAudio = /*#__PURE__*/function () {\n  var _ref4 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee4(file) {\n    var base64Data, response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          if (file) {\n            _context4.next = 3;\n            break;\n          }\n          return _context4.abrupt(\"return\", null);\n        case 3:\n          if (file.type.startsWith('audio/')) {\n            _context4.next = 5;\n            break;\n          }\n          throw new Error(\"File type \".concat(file.type, \" is not supported for audio processing\"));\n        case 5:\n          _context4.next = 7;\n          return readFileAsBase64(file);\n        case 7:\n          base64Data = _context4.sent;\n          _context4.next = 10;\n          return fetchAIProcessing('audio', base64Data, file.name);\n        case 10:\n          response = _context4.sent;\n          // Store the processed result\n          processedData = {\n            originalName: file.name,\n            type: 'audio',\n            size: file.size,\n            mimeType: file.type,\n            processingResult: response,\n            timestamp: new Date().toISOString(),\n            data: base64Data\n          };\n          _context4.next = 14;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('audio', JSON.stringify(processedData));\n        case 14:\n          return _context4.abrupt(\"return\", processedData);\n        case 17:\n          _context4.prev = 17;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error('Error processing audio:', _context4.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            originalName: file ? file.name : 'unknown',\n            type: 'audio',\n            size: file ? file.size : 0,\n            mimeType: file ? file.type : 'unknown',\n            processingResult: \"Error: Unable to process audio. \".concat(_context4.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context4.next = 23;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('audio', JSON.stringify(errorData));\n        case 23:\n          return _context4.abrupt(\"return\", errorData);\n        case 24:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[0, 17]]);\n  }));\n  return function processAudio(_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n// Process text with AI\nvar processText = /*#__PURE__*/function () {\n  var _ref5 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee5(text) {\n    var response, processedData, errorData;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          if (!(!text || typeof text !== 'string' || text.trim().length === 0)) {\n            _context5.next = 3;\n            break;\n          }\n          throw new Error('Invalid or empty text input');\n        case 3:\n          _context5.next = 5;\n          return fetchAIProcessing('text', text);\n        case 5:\n          response = _context5.sent;\n          // Store the processed result\n          processedData = {\n            type: 'text',\n            content: text,\n            processingResult: response,\n            timestamp: new Date().toISOString()\n          };\n          _context5.next = 9;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('text', JSON.stringify(processedData));\n        case 9:\n          return _context5.abrupt(\"return\", processedData);\n        case 12:\n          _context5.prev = 12;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error('Error processing text:', _context5.t0);\n\n          // Create a fallback processed result with error information\n          errorData = {\n            type: 'text',\n            content: text || '',\n            processingResult: \"Error: Unable to process text. \".concat(_context5.t0.message),\n            timestamp: new Date().toISOString(),\n            error: true\n          }; // Still store the error result so user can see it in visualizations\n          _context5.next = 18;\n          return (0,_database__WEBPACK_IMPORTED_MODULE_2__.insertData)('text', JSON.stringify(errorData));\n        case 18:\n          return _context5.abrupt(\"return\", errorData);\n        case 19:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[0, 12]]);\n  }));\n  return function processText(_x6) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\n// Function to call relevant API for processing based on media type\nvar fetchAIProcessing = /*#__PURE__*/function () {\n  var _ref6 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee6(mediaType, content) {\n    var filename,\n      openAIApiKey,\n      openRouterApiKey,\n      _args6 = arguments;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          filename = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : '';\n          // Get API keys from environment variables\n          openAIApiKey = \"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\";\n          openRouterApiKey = process.env.OPENROUTER_API_KEY; // Ensure we have an API key\n          if (!(!openAIApiKey && !openRouterApiKey)) {\n            _context6.next = 6;\n            break;\n          }\n          console.error('API key not found in environment variables');\n          throw new Error('API key is required for media processing');\n        case 6:\n          _context6.prev = 6;\n          _context6.t0 = mediaType;\n          _context6.next = _context6.t0 === 'image' ? 10 : _context6.t0 === 'audio' ? 13 : _context6.t0 === 'video' ? 16 : _context6.t0 === 'text' ? 19 : 22;\n          break;\n        case 10:\n          _context6.next = 12;\n          return processImageWithGPT4Vision(openAIApiKey, content, filename);\n        case 12:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 13:\n          _context6.next = 15;\n          return processAudioWithWhisper(openAIApiKey, content, filename);\n        case 15:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 16:\n          _context6.next = 18;\n          return processVideoWithFrameExtraction(openAIApiKey, content, filename);\n        case 18:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 19:\n          _context6.next = 21;\n          return processTextWithGPT(openRouterApiKey || openAIApiKey, content);\n        case 21:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 22:\n          throw new Error(\"Unsupported media type: \".concat(mediaType));\n        case 23:\n          _context6.next = 29;\n          break;\n        case 25:\n          _context6.prev = 25;\n          _context6.t1 = _context6[\"catch\"](6);\n          console.error(\"Error in AI processing for \".concat(mediaType, \":\"), _context6.t1);\n          throw _context6.t1;\n        case 29:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[6, 25]]);\n  }));\n  return function fetchAIProcessing(_x7, _x8) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\n// Process image with OpenAI Vision models\nvar processImageWithGPT4Vision = /*#__PURE__*/function () {\n  var _ref7 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee7(apiKey, imageData, filename) {\n    var isOpenRouter, model, endpoint, headers, base64Image, imgDetails, requestBody, response, status, data, _data$error;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          console.log('Processing image with OpenAI Vision models...');\n\n          // Check if we're using OpenRouter or OpenAI based on the API key format\n          isOpenRouter = apiKey.startsWith('sk-or-');\n          headers = {\n            'Content-Type': 'application/json',\n            'Authorization': \"Bearer \".concat(apiKey)\n          }; // Select appropriate model and endpoint based on API key type\n          if (isOpenRouter) {\n            model = 'openai/gpt-4-vision-preview'; // OpenRouter format for Vision model\n            endpoint = 'https://openrouter.ai/api/v1/chat/completions';\n            headers['HTTP-Referer'] = 'https://precek.app'; // Required by OpenRouter\n            console.log('Using OpenRouter for image processing');\n          } else {\n            // Using OpenAI directly\n            model = 'gpt-4-vision-preview'; // Latest vision model\n            endpoint = 'https://api.openai.com/v1/chat/completions';\n            console.log('Using OpenAI directly for image processing');\n          }\n\n          // Process the image data - make sure we have a proper format\n          base64Image = imageData;\n          if (base64Image.includes(',')) {\n            // Extract the base64 part after the comma if it's a data URL\n            base64Image = base64Image.split(',')[1];\n          }\n\n          // Get image details\n          _context7.next = 9;\n          return getImageDetails(imageData);\n        case 9:\n          imgDetails = _context7.sent;\n          console.log(\"Image validated: \".concat(filename, \" (\").concat(imgDetails.width, \"x\").concat(imgDetails.height, \", \").concat(imgDetails.format, \")\"));\n\n          // Create the API request body\n          requestBody = {\n            model: model,\n            messages: [{\n              role: 'user',\n              content: [{\n                type: 'text',\n                text: \"Please analyze this image thoroughly and provide:\\n1. Description of main subjects and elements\\n2. Colors, lighting, and composition analysis\\n3. Any text visible in the image (transcribe exactly)\\n4. Context and potential meaning/purpose of the image\\n5. Any notable objects, landmarks, or people\\n6. Image quality and technical assessment\\n\\nFilename: \".concat(filename || 'uploaded image')\n              }, {\n                type: 'image_url',\n                image_url: {\n                  url: \"data:\".concat(imgDetails.mimeType, \";base64,\").concat(base64Image)\n                }\n              }]\n            }],\n            max_tokens: 1000,\n            temperature: 0.7\n          }; // Make the API request\n          console.log(\"Sending request to \".concat(isOpenRouter ? 'OpenRouter' : 'OpenAI', \" API...\"));\n          _context7.next = 15;\n          return (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            method: 'post',\n            url: endpoint,\n            headers: headers,\n            data: requestBody,\n            timeout: 60000 // 60 second timeout for image processing\n          });\n        case 15:\n          response = _context7.sent;\n          if (!(response.data && response.data.choices && response.data.choices.length > 0)) {\n            _context7.next = 21;\n            break;\n          }\n          console.log('Image successfully processed by vision model');\n          return _context7.abrupt(\"return\", formatImageAnalysis(response.data.choices[0].message.content, filename, imgDetails));\n        case 21:\n          console.error('Unexpected API response format:', response.data);\n          throw new Error('Failed to process image with AI model: invalid response format');\n        case 23:\n          _context7.next = 46;\n          break;\n        case 25:\n          _context7.prev = 25;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error('Image processing error:', _context7.t0);\n          // Check for specific API error types\n          if (!_context7.t0.response) {\n            _context7.next = 45;\n            break;\n          }\n          status = _context7.t0.response.status;\n          data = _context7.t0.response.data;\n          if (!(status === 400)) {\n            _context7.next = 35;\n            break;\n          }\n          throw new Error(\"Image processing failed: Bad request - \".concat(((_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) || 'Invalid request parameters'));\n        case 35:\n          if (!(status === 401)) {\n            _context7.next = 39;\n            break;\n          }\n          throw new Error('Image processing failed: Invalid API key or unauthorized access');\n        case 39:\n          if (!(status === 429)) {\n            _context7.next = 43;\n            break;\n          }\n          throw new Error('Image processing failed: Rate limit exceeded or insufficient quota');\n        case 43:\n          if (!(status === 500)) {\n            _context7.next = 45;\n            break;\n          }\n          throw new Error('Image processing failed: OpenAI service error');\n        case 45:\n          throw new Error(\"Image processing failed: \".concat(_context7.t0.message));\n        case 46:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7, null, [[0, 25]]);\n  }));\n  return function processImageWithGPT4Vision(_x9, _x10, _x11) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\n// Helper function to get image details\nvar getImageDetails = /*#__PURE__*/function () {\n  var _ref8 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee8(imageData) {\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          return _context8.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var img = new Image();\n            img.onload = function () {\n              // Get image format from data URL\n              var format = 'jpeg'; // Default\n              var mimeType = 'image/jpeg'; // Default\n\n              if (imageData.includes('data:')) {\n                var mimeMatch = imageData.match(/data:([^;]+);/);\n                if (mimeMatch && mimeMatch[1]) {\n                  mimeType = mimeMatch[1];\n                  format = mimeMatch[1].split('/')[1];\n                }\n              }\n              resolve({\n                width: img.width,\n                height: img.height,\n                format: format,\n                mimeType: mimeType,\n                aspectRatio: img.width / img.height\n              });\n            };\n            img.onerror = function () {\n              reject(new Error('Failed to load image for analysis'));\n            };\n            img.src = imageData;\n          }));\n        case 1:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return function getImageDetails(_x12) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\n// Format the image analysis in a structured way\nvar formatImageAnalysis = function formatImageAnalysis(content, filename, imageDetails) {\n  return \"# Image Analysis: \".concat(filename || 'Uploaded Image', \"\\n\\n## Technical Details\\n- Dimensions: \").concat(imageDetails.width, \"x\").concat(imageDetails.height, \" pixels\\n- Format: \").concat(imageDetails.format.toUpperCase(), \"\\n- Aspect Ratio: \").concat(imageDetails.aspectRatio.toFixed(2), \"\\n\\n## Analysis\\n\").concat(content, \"\\n\\n---\\n*Analyzed with OpenAI Vision Model*\");\n};\n\n// Process audio with Whisper API according to OpenAI docs\n// https://platform.openai.com/docs/guides/speech-to-text/quickstart\nvar processAudioWithWhisper = /*#__PURE__*/function () {\n  var _ref9 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee9(apiKey, audioData, filename) {\n    var audioBase64, contentType, byteCharacters, byteArrays, offset, slice, byteNumbers, i, byteArray, audioBlob, formData, response, transcription, analysisResponse;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          console.log('Processing audio with Whisper API...');\n\n          // Convert base64 audio data to a Blob\n          audioBase64 = audioData;\n          if (audioBase64.includes(',')) {\n            audioBase64 = audioBase64.split(',')[1];\n          }\n\n          // Determine the content type from the data URL or filename\n          contentType = audioData.includes('data:') ? audioData.split(';')[0].split(':')[1] : filename.endsWith('.mp3') ? 'audio/mp3' : 'audio/mpeg'; // Convert base64 to a Blob (important for FormData)\n          byteCharacters = atob(audioBase64);\n          byteArrays = [];\n          for (offset = 0; offset < byteCharacters.length; offset += 1024) {\n            slice = byteCharacters.slice(offset, offset + 1024);\n            byteNumbers = new Array(slice.length);\n            for (i = 0; i < slice.length; i++) {\n              byteNumbers[i] = slice.charCodeAt(i);\n            }\n            byteArray = new Uint8Array(byteNumbers);\n            byteArrays.push(byteArray);\n          }\n          audioBlob = new Blob(byteArrays, {\n            type: contentType\n          });\n          console.log(\"Created audio blob of type \".concat(contentType, \", size: \").concat(audioBlob.size, \" bytes\"));\n\n          // Create a form data object as required by the Whisper API\n          formData = new FormData();\n          formData.append('file', audioBlob, filename || 'audio.mp3');\n          formData.append('model', 'whisper-1');\n          formData.append('response_format', 'json'); // Get structured JSON response\n          formData.append('language', 'en'); // Set to English for better accuracy\n\n          // Call the OpenAI Whisper API\n          console.log('Sending request to Whisper API...');\n          _context9.next = 18;\n          return (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            method: 'post',\n            url: 'https://api.openai.com/v1/audio/transcriptions',\n            headers: {\n              'Authorization': \"Bearer \".concat(apiKey)\n              // Content-Type is set automatically by axios with FormData\n            },\n\n            data: formData\n          });\n        case 18:\n          response = _context9.sent;\n          if (!(response.data && response.data.text)) {\n            _context9.next = 33;\n            break;\n          }\n          transcription = response.data.text;\n          console.log('Successfully transcribed audio');\n\n          // Now analyze the transcription with GPT\n          console.log('Analyzing transcription content...');\n          _context9.next = 25;\n          return (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])({\n            method: 'post',\n            url: 'https://api.openai.com/v1/chat/completions',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"Bearer \".concat(apiKey)\n            },\n            data: {\n              model: 'gpt-3.5-turbo',\n              messages: [{\n                role: 'user',\n                content: \"Analyze this audio transcription and provide a summary of key points, topics, and any notable patterns or insights:\\n\\n\".concat(transcription)\n              }],\n              max_tokens: 500\n            }\n          });\n        case 25:\n          analysisResponse = _context9.sent;\n          if (!(analysisResponse.data && analysisResponse.data.choices && analysisResponse.data.choices.length > 0 && analysisResponse.data.choices[0].message)) {\n            _context9.next = 30;\n            break;\n          }\n          return _context9.abrupt(\"return\", \"## Audio Transcription\\n\\n\".concat(transcription, \"\\n\\n## Analysis\\n\\n\").concat(analysisResponse.data.choices[0].message.content));\n        case 30:\n          return _context9.abrupt(\"return\", \"## Audio Transcription\\n\\n\".concat(transcription, \"\\n\\n(Analysis unavailable)\"));\n        case 31:\n          _context9.next = 35;\n          break;\n        case 33:\n          console.error('Unexpected API response format:', response.data);\n          throw new Error('Failed to transcribe audio: unexpected response format');\n        case 35:\n          _context9.next = 42;\n          break;\n        case 37:\n          _context9.prev = 37;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error('Audio processing error:', _context9.t0);\n          if (_context9.t0.response) {\n            console.error('API error response:', _context9.t0.response.data);\n          }\n          throw new Error(\"Audio processing failed: \".concat(_context9.t0.message));\n        case 42:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9, null, [[0, 37]]);\n  }));\n  return function processAudioWithWhisper(_x13, _x14, _x15) {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\n// Process video by extracting multiple frames for analysis\nvar processVideoWithFrameExtraction = /*#__PURE__*/function () {\n  var _ref10 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee10(apiKey, videoData, filename) {\n    var videoBlob, videoUrl, video, frameCount, frames, canvas, ctx, i, timestamp, frameDataUrl, frameAnalyses, _i, frame, analysis, formattedAnalyses;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          console.log('Processing video with frame extraction...');\n\n          // Convert data URL to Blob for video element\n          _context10.next = 4;\n          return fetch(videoData).then(function (res) {\n            return res.blob();\n          });\n        case 4:\n          videoBlob = _context10.sent;\n          videoUrl = URL.createObjectURL(videoBlob); // Create a video element to extract frames\n          video = document.createElement('video');\n          video.muted = true; // Required for autoplay in some browsers\n          video.playsInline = true;\n          video.crossOrigin = 'anonymous';\n          video.src = videoUrl;\n\n          // Wait for metadata to load\n          _context10.next = 13;\n          return new Promise(function (resolve, reject) {\n            video.onloadedmetadata = resolve;\n            video.onerror = reject;\n            video.load();\n          });\n        case 13:\n          console.log(\"Video loaded: Duration \".concat(video.duration, \"s, Dimensions: \").concat(video.videoWidth, \"x\").concat(video.videoHeight));\n\n          // Extract multiple frames from different points in the video\n          frameCount = Math.min(3, Math.max(1, Math.floor(video.duration / 5)));\n          frames = []; // Create canvas for frame extraction\n          canvas = document.createElement('canvas');\n          canvas.width = video.videoWidth;\n          canvas.height = video.videoHeight;\n          ctx = canvas.getContext('2d'); // Extract frames at different timestamps\n          i = 0;\n        case 21:\n          if (!(i < frameCount)) {\n            _context10.next = 33;\n            break;\n          }\n          timestamp = i * (video.duration / (frameCount + 1)); // Seek to timestamp\n          video.currentTime = timestamp;\n\n          // Wait for seek to complete\n          _context10.next = 26;\n          return new Promise(function (resolve) {\n            video.onseeked = resolve;\n          });\n        case 26:\n          // Draw frame to canvas\n          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n          // Get frame as data URL\n          frameDataUrl = canvas.toDataURL('image/jpeg', 0.8);\n          frames.push({\n            timestamp: timestamp,\n            dataUrl: frameDataUrl\n          });\n          console.log(\"Extracted frame at \".concat(timestamp.toFixed(2), \"s\"));\n        case 30:\n          i++;\n          _context10.next = 21;\n          break;\n        case 33:\n          // Clean up video resources\n          URL.revokeObjectURL(videoUrl);\n\n          // Analyze frames with Vision API\n          console.log('Analyzing video frames with Vision API...');\n          frameAnalyses = [];\n          _i = 0;\n        case 37:\n          if (!(_i < frames.length)) {\n            _context10.next = 46;\n            break;\n          }\n          frame = frames[_i];\n          _context10.next = 41;\n          return processImageWithGPT4Vision(apiKey, frame.dataUrl, \"Frame at \".concat(frame.timestamp.toFixed(2), \"s from \").concat(filename));\n        case 41:\n          analysis = _context10.sent;\n          frameAnalyses.push({\n            timestamp: frame.timestamp,\n            analysis: analysis\n          });\n        case 43:\n          _i++;\n          _context10.next = 37;\n          break;\n        case 46:\n          // Combine all frame analyses into a comprehensive video analysis\n          formattedAnalyses = frameAnalyses.map(function (fa) {\n            return \"### Frame at \".concat(fa.timestamp.toFixed(2), \"s:\\n\").concat(fa.analysis);\n          }).join('\\n\\n');\n          return _context10.abrupt(\"return\", \"# Video Analysis for: \".concat(filename, \"\\n\\n## Technical Details\\n- Duration: \").concat(Math.round(video.duration), \" seconds\\n- Dimensions: \").concat(video.videoWidth, \"x\").concat(video.videoHeight, \"\\n- Format: \").concat(videoBlob.type, \"\\n- File Size: \").concat((videoBlob.size / (1024 * 1024)).toFixed(2), \" MB\\n\\n## Content Analysis\\n\").concat(formattedAnalyses, \"\\n\\nThis analysis is based on \").concat(frameCount, \" key frames extracted from the video.\"));\n        case 50:\n          _context10.prev = 50;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error('Video processing error:', _context10.t0);\n          throw new Error(\"Video processing failed: \".concat(_context10.t0.message));\n        case 54:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10, null, [[0, 50]]);\n  }));\n  return function processVideoWithFrameExtraction(_x16, _x17, _x18) {\n    return _ref10.apply(this, arguments);\n  };\n}();\n\n// Process text with GPT model through OpenRouter\nvar processTextWithGPT = /*#__PURE__*/function () {\n  var _ref11 = (0,C_Users_Artur_Documents_Cline_precek_precek_node_modules_next_dist_compiled_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])( /*#__PURE__*/C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee11(apiKey, text) {\n    var isOpenRouter, endpoint, model, requestBody, response;\n    return C_Users_Artur_Documents_Cline_precek_precek_node_modules_babel_runtime_regenerator_index_js__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          // Determine if we're using OpenRouter or OpenAI based on the API key format\n          isOpenRouter = apiKey.startsWith('sk-or-');\n          endpoint = isOpenRouter ? 'https://openrouter.ai/api/v1/chat/completions' : 'https://api.openai.com/v1/chat/completions'; // Use a more cost-effective model if going through OpenRouter\n          model = isOpenRouter ? 'openai/gpt-3.5-turbo' : 'gpt-3.5-turbo';\n          requestBody = {\n            model: model,\n            messages: [{\n              role: 'user',\n              content: text\n            }],\n            max_tokens: 1000\n          };\n          _context11.next = 7;\n          return axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].post(endpoint, requestBody, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"Bearer \".concat(apiKey)\n            }\n          });\n        case 7:\n          response = _context11.sent;\n          if (!(response.data && response.data.choices && response.data.choices.length > 0)) {\n            _context11.next = 12;\n            break;\n          }\n          return _context11.abrupt(\"return\", response.data.choices[0].message.content);\n        case 12:\n          console.error('Unexpected API response format:', response.data);\n          throw new Error('Failed to process text with AI model');\n        case 14:\n          _context11.next = 20;\n          break;\n        case 16:\n          _context11.prev = 16;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error('Text processing error:', _context11.t0);\n          throw new Error(\"Text processing failed: \".concat(_context11.t0.message));\n        case 20:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11, null, [[0, 16]]);\n  }));\n  return function processTextWithGPT(_x19, _x20) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/services/multimediaProcessor.js\n"));

/***/ })

});